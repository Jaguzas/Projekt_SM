
proj_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fd0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006198  08006198  00016198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061b0  080061b0  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  080061b0  080061b0  000161b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061b8  080061b8  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061b8  080061b8  000161b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061bc  080061bc  000161bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080061c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000578  20000028  080061e8  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  080061e8  000205a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179ed  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a2d  00000000  00000000  00037a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  0003a478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  0003b7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026dec  00000000  00000000  0003c9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173a5  00000000  00000000  000637cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3452  00000000  00000000  0007ab71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016dfc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005430  00000000  00000000  0016e018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000028 	.word	0x20000028
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006180 	.word	0x08006180

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000002c 	.word	0x2000002c
 8000204:	08006180 	.word	0x08006180

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_ldivmod>:
 8000a44:	b97b      	cbnz	r3, 8000a66 <__aeabi_ldivmod+0x22>
 8000a46:	b972      	cbnz	r2, 8000a66 <__aeabi_ldivmod+0x22>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bfbe      	ittt	lt
 8000a4c:	2000      	movlt	r0, #0
 8000a4e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000a52:	e006      	blt.n	8000a62 <__aeabi_ldivmod+0x1e>
 8000a54:	bf08      	it	eq
 8000a56:	2800      	cmpeq	r0, #0
 8000a58:	bf1c      	itt	ne
 8000a5a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000a5e:	f04f 30ff 	movne.w	r0, #4294967295
 8000a62:	f000 b9b9 	b.w	8000dd8 <__aeabi_idiv0>
 8000a66:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a6a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6e:	2900      	cmp	r1, #0
 8000a70:	db09      	blt.n	8000a86 <__aeabi_ldivmod+0x42>
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	db1a      	blt.n	8000aac <__aeabi_ldivmod+0x68>
 8000a76:	f000 f84d 	bl	8000b14 <__udivmoddi4>
 8000a7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a82:	b004      	add	sp, #16
 8000a84:	4770      	bx	lr
 8000a86:	4240      	negs	r0, r0
 8000a88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db1b      	blt.n	8000ac8 <__aeabi_ldivmod+0x84>
 8000a90:	f000 f840 	bl	8000b14 <__udivmoddi4>
 8000a94:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a9c:	b004      	add	sp, #16
 8000a9e:	4240      	negs	r0, r0
 8000aa0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aa4:	4252      	negs	r2, r2
 8000aa6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000aaa:	4770      	bx	lr
 8000aac:	4252      	negs	r2, r2
 8000aae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ab2:	f000 f82f 	bl	8000b14 <__udivmoddi4>
 8000ab6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000abe:	b004      	add	sp, #16
 8000ac0:	4240      	negs	r0, r0
 8000ac2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ac6:	4770      	bx	lr
 8000ac8:	4252      	negs	r2, r2
 8000aca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ace:	f000 f821 	bl	8000b14 <__udivmoddi4>
 8000ad2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ada:	b004      	add	sp, #16
 8000adc:	4252      	negs	r2, r2
 8000ade:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ae2:	4770      	bx	lr

08000ae4 <__aeabi_uldivmod>:
 8000ae4:	b953      	cbnz	r3, 8000afc <__aeabi_uldivmod+0x18>
 8000ae6:	b94a      	cbnz	r2, 8000afc <__aeabi_uldivmod+0x18>
 8000ae8:	2900      	cmp	r1, #0
 8000aea:	bf08      	it	eq
 8000aec:	2800      	cmpeq	r0, #0
 8000aee:	bf1c      	itt	ne
 8000af0:	f04f 31ff 	movne.w	r1, #4294967295
 8000af4:	f04f 30ff 	movne.w	r0, #4294967295
 8000af8:	f000 b96e 	b.w	8000dd8 <__aeabi_idiv0>
 8000afc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b04:	f000 f806 	bl	8000b14 <__udivmoddi4>
 8000b08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b10:	b004      	add	sp, #16
 8000b12:	4770      	bx	lr

08000b14 <__udivmoddi4>:
 8000b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b18:	9d08      	ldr	r5, [sp, #32]
 8000b1a:	4604      	mov	r4, r0
 8000b1c:	468c      	mov	ip, r1
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f040 8083 	bne.w	8000c2a <__udivmoddi4+0x116>
 8000b24:	428a      	cmp	r2, r1
 8000b26:	4617      	mov	r7, r2
 8000b28:	d947      	bls.n	8000bba <__udivmoddi4+0xa6>
 8000b2a:	fab2 f282 	clz	r2, r2
 8000b2e:	b142      	cbz	r2, 8000b42 <__udivmoddi4+0x2e>
 8000b30:	f1c2 0020 	rsb	r0, r2, #32
 8000b34:	fa24 f000 	lsr.w	r0, r4, r0
 8000b38:	4091      	lsls	r1, r2
 8000b3a:	4097      	lsls	r7, r2
 8000b3c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b40:	4094      	lsls	r4, r2
 8000b42:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b46:	0c23      	lsrs	r3, r4, #16
 8000b48:	fbbc f6f8 	udiv	r6, ip, r8
 8000b4c:	fa1f fe87 	uxth.w	lr, r7
 8000b50:	fb08 c116 	mls	r1, r8, r6, ip
 8000b54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b58:	fb06 f10e 	mul.w	r1, r6, lr
 8000b5c:	4299      	cmp	r1, r3
 8000b5e:	d909      	bls.n	8000b74 <__udivmoddi4+0x60>
 8000b60:	18fb      	adds	r3, r7, r3
 8000b62:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b66:	f080 8119 	bcs.w	8000d9c <__udivmoddi4+0x288>
 8000b6a:	4299      	cmp	r1, r3
 8000b6c:	f240 8116 	bls.w	8000d9c <__udivmoddi4+0x288>
 8000b70:	3e02      	subs	r6, #2
 8000b72:	443b      	add	r3, r7
 8000b74:	1a5b      	subs	r3, r3, r1
 8000b76:	b2a4      	uxth	r4, r4
 8000b78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b88:	45a6      	cmp	lr, r4
 8000b8a:	d909      	bls.n	8000ba0 <__udivmoddi4+0x8c>
 8000b8c:	193c      	adds	r4, r7, r4
 8000b8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b92:	f080 8105 	bcs.w	8000da0 <__udivmoddi4+0x28c>
 8000b96:	45a6      	cmp	lr, r4
 8000b98:	f240 8102 	bls.w	8000da0 <__udivmoddi4+0x28c>
 8000b9c:	3802      	subs	r0, #2
 8000b9e:	443c      	add	r4, r7
 8000ba0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba4:	eba4 040e 	sub.w	r4, r4, lr
 8000ba8:	2600      	movs	r6, #0
 8000baa:	b11d      	cbz	r5, 8000bb4 <__udivmoddi4+0xa0>
 8000bac:	40d4      	lsrs	r4, r2
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e9c5 4300 	strd	r4, r3, [r5]
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	b902      	cbnz	r2, 8000bbe <__udivmoddi4+0xaa>
 8000bbc:	deff      	udf	#255	; 0xff
 8000bbe:	fab2 f282 	clz	r2, r2
 8000bc2:	2a00      	cmp	r2, #0
 8000bc4:	d150      	bne.n	8000c68 <__udivmoddi4+0x154>
 8000bc6:	1bcb      	subs	r3, r1, r7
 8000bc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bcc:	fa1f f887 	uxth.w	r8, r7
 8000bd0:	2601      	movs	r6, #1
 8000bd2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bd6:	0c21      	lsrs	r1, r4, #16
 8000bd8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be0:	fb08 f30c 	mul.w	r3, r8, ip
 8000be4:	428b      	cmp	r3, r1
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0xe4>
 8000be8:	1879      	adds	r1, r7, r1
 8000bea:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0xe2>
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	f200 80e9 	bhi.w	8000dc8 <__udivmoddi4+0x2b4>
 8000bf6:	4684      	mov	ip, r0
 8000bf8:	1ac9      	subs	r1, r1, r3
 8000bfa:	b2a3      	uxth	r3, r4
 8000bfc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c00:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c04:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c08:	fb08 f800 	mul.w	r8, r8, r0
 8000c0c:	45a0      	cmp	r8, r4
 8000c0e:	d907      	bls.n	8000c20 <__udivmoddi4+0x10c>
 8000c10:	193c      	adds	r4, r7, r4
 8000c12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x10a>
 8000c18:	45a0      	cmp	r8, r4
 8000c1a:	f200 80d9 	bhi.w	8000dd0 <__udivmoddi4+0x2bc>
 8000c1e:	4618      	mov	r0, r3
 8000c20:	eba4 0408 	sub.w	r4, r4, r8
 8000c24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c28:	e7bf      	b.n	8000baa <__udivmoddi4+0x96>
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0x12e>
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	f000 80b1 	beq.w	8000d96 <__udivmoddi4+0x282>
 8000c34:	2600      	movs	r6, #0
 8000c36:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f683 	clz	r6, r3
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d14a      	bne.n	8000ce0 <__udivmoddi4+0x1cc>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0x140>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80b8 	bhi.w	8000dc4 <__udivmoddi4+0x2b0>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0103 	sbc.w	r1, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	468c      	mov	ip, r1
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0a8      	beq.n	8000bb4 <__udivmoddi4+0xa0>
 8000c62:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c66:	e7a5      	b.n	8000bb4 <__udivmoddi4+0xa0>
 8000c68:	f1c2 0320 	rsb	r3, r2, #32
 8000c6c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c70:	4097      	lsls	r7, r2
 8000c72:	fa01 f002 	lsl.w	r0, r1, r2
 8000c76:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7a:	40d9      	lsrs	r1, r3
 8000c7c:	4330      	orrs	r0, r6
 8000c7e:	0c03      	lsrs	r3, r0, #16
 8000c80:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c84:	fa1f f887 	uxth.w	r8, r7
 8000c88:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c90:	fb06 f108 	mul.w	r1, r6, r8
 8000c94:	4299      	cmp	r1, r3
 8000c96:	fa04 f402 	lsl.w	r4, r4, r2
 8000c9a:	d909      	bls.n	8000cb0 <__udivmoddi4+0x19c>
 8000c9c:	18fb      	adds	r3, r7, r3
 8000c9e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ca2:	f080 808d 	bcs.w	8000dc0 <__udivmoddi4+0x2ac>
 8000ca6:	4299      	cmp	r1, r3
 8000ca8:	f240 808a 	bls.w	8000dc0 <__udivmoddi4+0x2ac>
 8000cac:	3e02      	subs	r6, #2
 8000cae:	443b      	add	r3, r7
 8000cb0:	1a5b      	subs	r3, r3, r1
 8000cb2:	b281      	uxth	r1, r0
 8000cb4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cb8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cbc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc0:	fb00 f308 	mul.w	r3, r0, r8
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0x1c4>
 8000cc8:	1879      	adds	r1, r7, r1
 8000cca:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cce:	d273      	bcs.n	8000db8 <__udivmoddi4+0x2a4>
 8000cd0:	428b      	cmp	r3, r1
 8000cd2:	d971      	bls.n	8000db8 <__udivmoddi4+0x2a4>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4439      	add	r1, r7
 8000cd8:	1acb      	subs	r3, r1, r3
 8000cda:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cde:	e778      	b.n	8000bd2 <__udivmoddi4+0xbe>
 8000ce0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ce4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ce8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cec:	431c      	orrs	r4, r3
 8000cee:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cfa:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cfe:	431f      	orrs	r7, r3
 8000d00:	0c3b      	lsrs	r3, r7, #16
 8000d02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d06:	fa1f f884 	uxth.w	r8, r4
 8000d0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d0e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d12:	fb09 fa08 	mul.w	sl, r9, r8
 8000d16:	458a      	cmp	sl, r1
 8000d18:	fa02 f206 	lsl.w	r2, r2, r6
 8000d1c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x220>
 8000d22:	1861      	adds	r1, r4, r1
 8000d24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d28:	d248      	bcs.n	8000dbc <__udivmoddi4+0x2a8>
 8000d2a:	458a      	cmp	sl, r1
 8000d2c:	d946      	bls.n	8000dbc <__udivmoddi4+0x2a8>
 8000d2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d32:	4421      	add	r1, r4
 8000d34:	eba1 010a 	sub.w	r1, r1, sl
 8000d38:	b2bf      	uxth	r7, r7
 8000d3a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d42:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d46:	fb00 f808 	mul.w	r8, r0, r8
 8000d4a:	45b8      	cmp	r8, r7
 8000d4c:	d907      	bls.n	8000d5e <__udivmoddi4+0x24a>
 8000d4e:	19e7      	adds	r7, r4, r7
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d22e      	bcs.n	8000db4 <__udivmoddi4+0x2a0>
 8000d56:	45b8      	cmp	r8, r7
 8000d58:	d92c      	bls.n	8000db4 <__udivmoddi4+0x2a0>
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	4427      	add	r7, r4
 8000d5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d62:	eba7 0708 	sub.w	r7, r7, r8
 8000d66:	fba0 8902 	umull	r8, r9, r0, r2
 8000d6a:	454f      	cmp	r7, r9
 8000d6c:	46c6      	mov	lr, r8
 8000d6e:	4649      	mov	r1, r9
 8000d70:	d31a      	bcc.n	8000da8 <__udivmoddi4+0x294>
 8000d72:	d017      	beq.n	8000da4 <__udivmoddi4+0x290>
 8000d74:	b15d      	cbz	r5, 8000d8e <__udivmoddi4+0x27a>
 8000d76:	ebb3 020e 	subs.w	r2, r3, lr
 8000d7a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d7e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d82:	40f2      	lsrs	r2, r6
 8000d84:	ea4c 0202 	orr.w	r2, ip, r2
 8000d88:	40f7      	lsrs	r7, r6
 8000d8a:	e9c5 2700 	strd	r2, r7, [r5]
 8000d8e:	2600      	movs	r6, #0
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	462e      	mov	r6, r5
 8000d98:	4628      	mov	r0, r5
 8000d9a:	e70b      	b.n	8000bb4 <__udivmoddi4+0xa0>
 8000d9c:	4606      	mov	r6, r0
 8000d9e:	e6e9      	b.n	8000b74 <__udivmoddi4+0x60>
 8000da0:	4618      	mov	r0, r3
 8000da2:	e6fd      	b.n	8000ba0 <__udivmoddi4+0x8c>
 8000da4:	4543      	cmp	r3, r8
 8000da6:	d2e5      	bcs.n	8000d74 <__udivmoddi4+0x260>
 8000da8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dac:	eb69 0104 	sbc.w	r1, r9, r4
 8000db0:	3801      	subs	r0, #1
 8000db2:	e7df      	b.n	8000d74 <__udivmoddi4+0x260>
 8000db4:	4608      	mov	r0, r1
 8000db6:	e7d2      	b.n	8000d5e <__udivmoddi4+0x24a>
 8000db8:	4660      	mov	r0, ip
 8000dba:	e78d      	b.n	8000cd8 <__udivmoddi4+0x1c4>
 8000dbc:	4681      	mov	r9, r0
 8000dbe:	e7b9      	b.n	8000d34 <__udivmoddi4+0x220>
 8000dc0:	4666      	mov	r6, ip
 8000dc2:	e775      	b.n	8000cb0 <__udivmoddi4+0x19c>
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e74a      	b.n	8000c5e <__udivmoddi4+0x14a>
 8000dc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dcc:	4439      	add	r1, r7
 8000dce:	e713      	b.n	8000bf8 <__udivmoddi4+0xe4>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	443c      	add	r4, r7
 8000dd4:	e724      	b.n	8000c20 <__udivmoddi4+0x10c>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_idiv0>:
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af04      	add	r7, sp, #16
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <BMP280_Read8+0x38>)
 8000dec:	6818      	ldr	r0, [r3, #0]
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	230a      	movs	r3, #10
 8000df4:	9302      	str	r3, [sp, #8]
 8000df6:	2301      	movs	r3, #1
 8000df8:	9301      	str	r3, [sp, #4]
 8000dfa:	f107 030f 	add.w	r3, r7, #15
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2301      	movs	r3, #1
 8000e02:	21ec      	movs	r1, #236	; 0xec
 8000e04:	f001 fdfa 	bl	80029fc <HAL_I2C_Mem_Read>
  return tmp;
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000068 	.word	0x20000068

08000e18 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af04      	add	r7, sp, #16
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8000e22:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <BMP280_Read16+0x40>)
 8000e24:	6818      	ldr	r0, [r3, #0]
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	230a      	movs	r3, #10
 8000e2c:	9302      	str	r3, [sp, #8]
 8000e2e:	2302      	movs	r3, #2
 8000e30:	9301      	str	r3, [sp, #4]
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2301      	movs	r3, #1
 8000e3a:	21ec      	movs	r1, #236	; 0xec
 8000e3c:	f001 fdde 	bl	80029fc <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8000e40:	7b3b      	ldrb	r3, [r7, #12]
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	b21a      	sxth	r2, r3
 8000e46:	7b7b      	ldrb	r3, [r7, #13]
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b21b      	sxth	r3, r3
 8000e4e:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000068 	.word	0x20000068

08000e5c <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ffd5 	bl	8000e18 <BMP280_Read16>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8000e72:	89fb      	ldrh	r3, [r7, #14]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	b21a      	sxth	r2, r3
 8000e7a:	89fb      	ldrh	r3, [r7, #14]
 8000e7c:	021b      	lsls	r3, r3, #8
 8000e7e:	b21b      	sxth	r3, r3
 8000e80:	4313      	orrs	r3, r2
 8000e82:	b21b      	sxth	r3, r3
 8000e84:	b29b      	uxth	r3, r3
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af04      	add	r7, sp, #16
 8000e96:	4603      	mov	r3, r0
 8000e98:	460a      	mov	r2, r1
 8000e9a:	71fb      	strb	r3, [r7, #7]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <BMP280_Write8+0x34>)
 8000ea2:	6818      	ldr	r0, [r3, #0]
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	230a      	movs	r3, #10
 8000eaa:	9302      	str	r3, [sp, #8]
 8000eac:	2301      	movs	r3, #1
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	1dbb      	adds	r3, r7, #6
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	21ec      	movs	r1, #236	; 0xec
 8000eb8:	f001 fc8c 	bl	80027d4 <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000068 	.word	0x20000068

08000ec8 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af04      	add	r7, sp, #16
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <BMP280_Read24+0x40>)
 8000ed4:	6818      	ldr	r0, [r3, #0]
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	230a      	movs	r3, #10
 8000edc:	9302      	str	r3, [sp, #8]
 8000ede:	2303      	movs	r3, #3
 8000ee0:	9301      	str	r3, [sp, #4]
 8000ee2:	f107 030c 	add.w	r3, r7, #12
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	21ec      	movs	r1, #236	; 0xec
 8000eec:	f001 fd86 	bl	80029fc <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8000ef0:	7b3b      	ldrb	r3, [r7, #12]
 8000ef2:	041a      	lsls	r2, r3, #16
 8000ef4:	7b7b      	ldrb	r3, [r7, #13]
 8000ef6:	021b      	lsls	r3, r3, #8
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	7bba      	ldrb	r2, [r7, #14]
 8000efc:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000068 	.word	0x20000068

08000f0c <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	4608      	mov	r0, r1
 8000f16:	4611      	mov	r1, r2
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	70fb      	strb	r3, [r7, #3]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	70bb      	strb	r3, [r7, #2]
 8000f22:	4613      	mov	r3, r2
 8000f24:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 8000f26:	4a48      	ldr	r2, [pc, #288]	; (8001048 <BMP280_Init+0x13c>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 8000f2c:	787b      	ldrb	r3, [r7, #1]
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d901      	bls.n	8000f36 <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 8000f32:	2303      	movs	r3, #3
 8000f34:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 8000f36:	4a45      	ldr	r2, [pc, #276]	; (800104c <BMP280_Init+0x140>)
 8000f38:	787b      	ldrb	r3, [r7, #1]
 8000f3a:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 8000f3c:	787b      	ldrb	r3, [r7, #1]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d101      	bne.n	8000f46 <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 8000f46:	78fb      	ldrb	r3, [r7, #3]
 8000f48:	2b05      	cmp	r3, #5
 8000f4a:	d901      	bls.n	8000f50 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8000f4c:	2305      	movs	r3, #5
 8000f4e:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8000f50:	4a3f      	ldr	r2, [pc, #252]	; (8001050 <BMP280_Init+0x144>)
 8000f52:	78fb      	ldrb	r3, [r7, #3]
 8000f54:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 8000f56:	78bb      	ldrb	r3, [r7, #2]
 8000f58:	2b05      	cmp	r3, #5
 8000f5a:	d901      	bls.n	8000f60 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 8000f5c:	2305      	movs	r3, #5
 8000f5e:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8000f60:	4a3c      	ldr	r2, [pc, #240]	; (8001054 <BMP280_Init+0x148>)
 8000f62:	78bb      	ldrb	r3, [r7, #2]
 8000f64:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 8000f66:	bf00      	nop
 8000f68:	20d0      	movs	r0, #208	; 0xd0
 8000f6a:	f7ff ff37 	bl	8000ddc <BMP280_Read8>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b58      	cmp	r3, #88	; 0x58
 8000f72:	d1f9      	bne.n	8000f68 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8000f74:	2088      	movs	r0, #136	; 0x88
 8000f76:	f7ff ff71 	bl	8000e5c <BMP280_Read16LE>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b36      	ldr	r3, [pc, #216]	; (8001058 <BMP280_Init+0x14c>)
 8000f80:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8000f82:	208a      	movs	r0, #138	; 0x8a
 8000f84:	f7ff ff6a 	bl	8000e5c <BMP280_Read16LE>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	b21a      	sxth	r2, r3
 8000f8c:	4b33      	ldr	r3, [pc, #204]	; (800105c <BMP280_Init+0x150>)
 8000f8e:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8000f90:	208c      	movs	r0, #140	; 0x8c
 8000f92:	f7ff ff63 	bl	8000e5c <BMP280_Read16LE>
 8000f96:	4603      	mov	r3, r0
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	4b31      	ldr	r3, [pc, #196]	; (8001060 <BMP280_Init+0x154>)
 8000f9c:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 8000f9e:	208e      	movs	r0, #142	; 0x8e
 8000fa0:	f7ff ff5c 	bl	8000e5c <BMP280_Read16LE>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b2e      	ldr	r3, [pc, #184]	; (8001064 <BMP280_Init+0x158>)
 8000faa:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 8000fac:	2090      	movs	r0, #144	; 0x90
 8000fae:	f7ff ff55 	bl	8000e5c <BMP280_Read16LE>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	b21a      	sxth	r2, r3
 8000fb6:	4b2c      	ldr	r3, [pc, #176]	; (8001068 <BMP280_Init+0x15c>)
 8000fb8:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8000fba:	2092      	movs	r0, #146	; 0x92
 8000fbc:	f7ff ff4e 	bl	8000e5c <BMP280_Read16LE>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	4b29      	ldr	r3, [pc, #164]	; (800106c <BMP280_Init+0x160>)
 8000fc6:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8000fc8:	2094      	movs	r0, #148	; 0x94
 8000fca:	f7ff ff47 	bl	8000e5c <BMP280_Read16LE>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	b21a      	sxth	r2, r3
 8000fd2:	4b27      	ldr	r3, [pc, #156]	; (8001070 <BMP280_Init+0x164>)
 8000fd4:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 8000fd6:	2096      	movs	r0, #150	; 0x96
 8000fd8:	f7ff ff40 	bl	8000e5c <BMP280_Read16LE>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	b21a      	sxth	r2, r3
 8000fe0:	4b24      	ldr	r3, [pc, #144]	; (8001074 <BMP280_Init+0x168>)
 8000fe2:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8000fe4:	2098      	movs	r0, #152	; 0x98
 8000fe6:	f7ff ff39 	bl	8000e5c <BMP280_Read16LE>
 8000fea:	4603      	mov	r3, r0
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	4b22      	ldr	r3, [pc, #136]	; (8001078 <BMP280_Init+0x16c>)
 8000ff0:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8000ff2:	209a      	movs	r0, #154	; 0x9a
 8000ff4:	f7ff ff32 	bl	8000e5c <BMP280_Read16LE>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b21a      	sxth	r2, r3
 8000ffc:	4b1f      	ldr	r3, [pc, #124]	; (800107c <BMP280_Init+0x170>)
 8000ffe:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8001000:	209c      	movs	r0, #156	; 0x9c
 8001002:	f7ff ff2b 	bl	8000e5c <BMP280_Read16LE>
 8001006:	4603      	mov	r3, r0
 8001008:	b21a      	sxth	r2, r3
 800100a:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <BMP280_Init+0x174>)
 800100c:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 800100e:	209e      	movs	r0, #158	; 0x9e
 8001010:	f7ff ff24 	bl	8000e5c <BMP280_Read16LE>
 8001014:	4603      	mov	r3, r0
 8001016:	b21a      	sxth	r2, r3
 8001018:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <BMP280_Init+0x178>)
 800101a:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 800101c:	78fb      	ldrb	r3, [r7, #3]
 800101e:	015b      	lsls	r3, r3, #5
 8001020:	b25a      	sxtb	r2, r3
 8001022:	78bb      	ldrb	r3, [r7, #2]
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	b25b      	sxtb	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	b25a      	sxtb	r2, r3
 800102c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001030:	4313      	orrs	r3, r2
 8001032:	b25b      	sxtb	r3, r3
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4619      	mov	r1, r3
 8001038:	20f4      	movs	r0, #244	; 0xf4
 800103a:	f7ff ff29 	bl	8000e90 <BMP280_Write8>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000068 	.word	0x20000068
 800104c:	2000006c 	.word	0x2000006c
 8001050:	20000064 	.word	0x20000064
 8001054:	20000056 	.word	0x20000056
 8001058:	20000062 	.word	0x20000062
 800105c:	20000058 	.word	0x20000058
 8001060:	20000050 	.word	0x20000050
 8001064:	2000005c 	.word	0x2000005c
 8001068:	20000052 	.word	0x20000052
 800106c:	2000006e 	.word	0x2000006e
 8001070:	20000072 	.word	0x20000072
 8001074:	2000005a 	.word	0x2000005a
 8001078:	20000060 	.word	0x20000060
 800107c:	20000054 	.word	0x20000054
 8001080:	2000005e 	.word	0x2000005e
 8001084:	20000070 	.word	0x20000070

08001088 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 800108e:	4b3d      	ldr	r3, [pc, #244]	; (8001184 <BMP280_ReadTemperature+0xfc>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d16d      	bne.n	8001172 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 8001096:	20f4      	movs	r0, #244	; 0xf4
 8001098:	f7ff fea0 	bl	8000ddc <BMP280_Read8>
 800109c:	4603      	mov	r3, r0
 800109e:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	f023 0303 	bic.w	r3, r3, #3
 80010a6:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 80010b0:	7dfb      	ldrb	r3, [r7, #23]
 80010b2:	4619      	mov	r1, r3
 80010b4:	20f4      	movs	r0, #244	; 0xf4
 80010b6:	f7ff feeb 	bl	8000e90 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 80010ba:	20f4      	movs	r0, #244	; 0xf4
 80010bc:	f7ff fe8e 	bl	8000ddc <BMP280_Read8>
 80010c0:	4603      	mov	r3, r0
 80010c2:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 80010c4:	7dbb      	ldrb	r3, [r7, #22]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 80010cc:	7dbb      	ldrb	r3, [r7, #22]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d14f      	bne.n	8001172 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 80010d2:	20f4      	movs	r0, #244	; 0xf4
 80010d4:	f7ff fe82 	bl	8000ddc <BMP280_Read8>
 80010d8:	4603      	mov	r3, r0
 80010da:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 80010dc:	7dbb      	ldrb	r3, [r7, #22]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 80010e4:	7dbb      	ldrb	r3, [r7, #22]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d000      	beq.n	80010ec <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 80010ea:	e7f2      	b.n	80010d2 <BMP280_ReadTemperature+0x4a>
				  break;
 80010ec:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 80010ee:	20fa      	movs	r0, #250	; 0xfa
 80010f0:	f7ff feea 	bl	8000ec8 <BMP280_Read24>
 80010f4:	4603      	mov	r3, r0
 80010f6:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	111b      	asrs	r3, r3, #4
 80010fc:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	10da      	asrs	r2, r3, #3
 8001102:	4b21      	ldr	r3, [pc, #132]	; (8001188 <BMP280_ReadTemperature+0x100>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800110a:	4a20      	ldr	r2, [pc, #128]	; (800118c <BMP280_ReadTemperature+0x104>)
 800110c:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001110:	fb02 f303 	mul.w	r3, r2, r3
 8001114:	12db      	asrs	r3, r3, #11
 8001116:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	111b      	asrs	r3, r3, #4
 800111c:	4a1a      	ldr	r2, [pc, #104]	; (8001188 <BMP280_ReadTemperature+0x100>)
 800111e:	8812      	ldrh	r2, [r2, #0]
 8001120:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	1112      	asrs	r2, r2, #4
 8001126:	4918      	ldr	r1, [pc, #96]	; (8001188 <BMP280_ReadTemperature+0x100>)
 8001128:	8809      	ldrh	r1, [r1, #0]
 800112a:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800112c:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001130:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 8001132:	4a17      	ldr	r2, [pc, #92]	; (8001190 <BMP280_ReadTemperature+0x108>)
 8001134:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001138:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800113c:	139b      	asrs	r3, r3, #14
 800113e:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	4413      	add	r3, r2
 8001146:	4a13      	ldr	r2, [pc, #76]	; (8001194 <BMP280_ReadTemperature+0x10c>)
 8001148:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <BMP280_ReadTemperature+0x10c>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	3380      	adds	r3, #128	; 0x80
 8001156:	121b      	asrs	r3, r3, #8
 8001158:	ee07 3a90 	vmov	s15, r3
 800115c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001160:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8001164:	edd7 7a01 	vldr	s15, [r7, #4]
 8001168:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001198 <BMP280_ReadTemperature+0x110>
 800116c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001170:	e001      	b.n	8001176 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8001172:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800119c <BMP280_ReadTemperature+0x114>
 8001176:	eef0 7a47 	vmov.f32	s15, s14
}
 800117a:	eeb0 0a67 	vmov.f32	s0, s15
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	2000006c 	.word	0x2000006c
 8001188:	20000062 	.word	0x20000062
 800118c:	20000058 	.word	0x20000058
 8001190:	20000050 	.word	0x20000050
 8001194:	20000074 	.word	0x20000074
 8001198:	42c80000 	.word	0x42c80000
 800119c:	c2c60000 	.word	0xc2c60000

080011a0 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 80011a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011a4:	b09c      	sub	sp, #112	; 0x70
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80011aa:	64b9      	str	r1, [r7, #72]	; 0x48
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 80011ac:	f7ff ff6c 	bl	8001088 <BMP280_ReadTemperature>
 80011b0:	eef0 7a40 	vmov.f32	s15, s0
 80011b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011b6:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 80011ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011bc:	edd3 7a00 	vldr	s15, [r3]
 80011c0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8001390 <BMP280_ReadTemperatureAndPressure+0x1f0>
 80011c4:	eef4 7a47 	vcmp.f32	s15, s14
 80011c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011cc:	d101      	bne.n	80011d2 <BMP280_ReadTemperatureAndPressure+0x32>
		  return -1;
 80011ce:	23ff      	movs	r3, #255	; 0xff
 80011d0:	e1d8      	b.n	8001584 <BMP280_ReadTemperatureAndPressure+0x3e4>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 80011d2:	20f7      	movs	r0, #247	; 0xf7
 80011d4:	f7ff fe78 	bl	8000ec8 <BMP280_Read24>
 80011d8:	4603      	mov	r3, r0
 80011da:	66fb      	str	r3, [r7, #108]	; 0x6c
	  adc_P >>= 4;
 80011dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011de:	111b      	asrs	r3, r3, #4
 80011e0:	66fb      	str	r3, [r7, #108]	; 0x6c

	  var1 = ((int64_t)t_fine) - 128000;
 80011e2:	4b6c      	ldr	r3, [pc, #432]	; (8001394 <BMP280_ReadTemperatureAndPressure+0x1f4>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80011ec:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 80011f0:	f143 35ff 	adc.w	r5, r3, #4294967295
 80011f4:	e9c7 4518 	strd	r4, r5, [r7, #96]	; 0x60
	  var2 = var1 * var1 * (int64_t)p6;
 80011f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80011fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011fc:	fb03 f102 	mul.w	r1, r3, r2
 8001200:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001202:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001204:	fb03 f302 	mul.w	r3, r3, r2
 8001208:	18ca      	adds	r2, r1, r3
 800120a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800120c:	fba3 4503 	umull	r4, r5, r3, r3
 8001210:	1953      	adds	r3, r2, r5
 8001212:	461d      	mov	r5, r3
 8001214:	4b60      	ldr	r3, [pc, #384]	; (8001398 <BMP280_ReadTemperatureAndPressure+0x1f8>)
 8001216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800121a:	b21a      	sxth	r2, r3
 800121c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001220:	fb02 f005 	mul.w	r0, r2, r5
 8001224:	fb04 f103 	mul.w	r1, r4, r3
 8001228:	4401      	add	r1, r0
 800122a:	fba4 2302 	umull	r2, r3, r4, r2
 800122e:	4419      	add	r1, r3
 8001230:	460b      	mov	r3, r1
 8001232:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001236:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 800123a:	4b58      	ldr	r3, [pc, #352]	; (800139c <BMP280_ReadTemperatureAndPressure+0x1fc>)
 800123c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001240:	b21a      	sxth	r2, r3
 8001242:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001246:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001248:	fb03 f001 	mul.w	r0, r3, r1
 800124c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800124e:	fb02 f101 	mul.w	r1, r2, r1
 8001252:	4408      	add	r0, r1
 8001254:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001256:	fba1 2302 	umull	r2, r3, r1, r2
 800125a:	18c1      	adds	r1, r0, r3
 800125c:	460b      	mov	r3, r1
 800125e:	f04f 0000 	mov.w	r0, #0
 8001262:	f04f 0100 	mov.w	r1, #0
 8001266:	0459      	lsls	r1, r3, #17
 8001268:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 800126c:	0450      	lsls	r0, r2, #17
 800126e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001272:	eb12 0800 	adds.w	r8, r2, r0
 8001276:	eb43 0901 	adc.w	r9, r3, r1
 800127a:	e9c7 8916 	strd	r8, r9, [r7, #88]	; 0x58
	  var2 = var2 + (((int64_t)p4)<<35);
 800127e:	4b48      	ldr	r3, [pc, #288]	; (80013a0 <BMP280_ReadTemperatureAndPressure+0x200>)
 8001280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001284:	b21a      	sxth	r2, r3
 8001286:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800128a:	f04f 0000 	mov.w	r0, #0
 800128e:	f04f 0100 	mov.w	r1, #0
 8001292:	00d1      	lsls	r1, r2, #3
 8001294:	2000      	movs	r0, #0
 8001296:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800129a:	1814      	adds	r4, r2, r0
 800129c:	61bc      	str	r4, [r7, #24]
 800129e:	414b      	adcs	r3, r1
 80012a0:	61fb      	str	r3, [r7, #28]
 80012a2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80012a6:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80012aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80012ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012ae:	fb03 f102 	mul.w	r1, r3, r2
 80012b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80012b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012b6:	fb03 f302 	mul.w	r3, r3, r2
 80012ba:	18ca      	adds	r2, r1, r3
 80012bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012be:	fba3 4503 	umull	r4, r5, r3, r3
 80012c2:	1953      	adds	r3, r2, r5
 80012c4:	461d      	mov	r5, r3
 80012c6:	4b37      	ldr	r3, [pc, #220]	; (80013a4 <BMP280_ReadTemperatureAndPressure+0x204>)
 80012c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80012d2:	fb02 f005 	mul.w	r0, r2, r5
 80012d6:	fb04 f103 	mul.w	r1, r4, r3
 80012da:	4401      	add	r1, r0
 80012dc:	fba4 2302 	umull	r2, r3, r4, r2
 80012e0:	4419      	add	r1, r3
 80012e2:	460b      	mov	r3, r1
 80012e4:	f04f 0800 	mov.w	r8, #0
 80012e8:	f04f 0900 	mov.w	r9, #0
 80012ec:	ea4f 2812 	mov.w	r8, r2, lsr #8
 80012f0:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 80012f4:	ea4f 2923 	mov.w	r9, r3, asr #8
	    ((var1 * (int64_t)p2)<<12);
 80012f8:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <BMP280_ReadTemperatureAndPressure+0x208>)
 80012fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fe:	b21a      	sxth	r2, r3
 8001300:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001304:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001306:	fb03 f001 	mul.w	r0, r3, r1
 800130a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800130c:	fb02 f101 	mul.w	r1, r2, r1
 8001310:	1844      	adds	r4, r0, r1
 8001312:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001314:	fba1 0102 	umull	r0, r1, r1, r2
 8001318:	1863      	adds	r3, r4, r1
 800131a:	4619      	mov	r1, r3
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	f04f 0300 	mov.w	r3, #0
 8001324:	030b      	lsls	r3, r1, #12
 8001326:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 800132a:	0302      	lsls	r2, r0, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 800132c:	eb18 0102 	adds.w	r1, r8, r2
 8001330:	6139      	str	r1, [r7, #16]
 8001332:	eb49 0303 	adc.w	r3, r9, r3
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800133c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8001340:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001344:	1c11      	adds	r1, r2, #0
 8001346:	6439      	str	r1, [r7, #64]	; 0x40
 8001348:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 800134c:	647b      	str	r3, [r7, #68]	; 0x44
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <BMP280_ReadTemperatureAndPressure+0x20c>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	b29a      	uxth	r2, r3
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800135c:	4629      	mov	r1, r5
 800135e:	fb02 f001 	mul.w	r0, r2, r1
 8001362:	4621      	mov	r1, r4
 8001364:	fb01 f103 	mul.w	r1, r1, r3
 8001368:	4401      	add	r1, r0
 800136a:	4620      	mov	r0, r4
 800136c:	fba0 2302 	umull	r2, r3, r0, r2
 8001370:	4419      	add	r1, r3
 8001372:	460b      	mov	r3, r1
 8001374:	f04f 0000 	mov.w	r0, #0
 8001378:	f04f 0100 	mov.w	r1, #0
 800137c:	1058      	asrs	r0, r3, #1
 800137e:	17d9      	asrs	r1, r3, #31
 8001380:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

	  if (var1 == 0) {
 8001384:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001388:	4313      	orrs	r3, r2
 800138a:	d111      	bne.n	80013b0 <BMP280_ReadTemperatureAndPressure+0x210>
	    return 0;  // avoid exception caused by division by zero
 800138c:	2300      	movs	r3, #0
 800138e:	e0f9      	b.n	8001584 <BMP280_ReadTemperatureAndPressure+0x3e4>
 8001390:	c2c60000 	.word	0xc2c60000
 8001394:	20000074 	.word	0x20000074
 8001398:	20000060 	.word	0x20000060
 800139c:	2000005a 	.word	0x2000005a
 80013a0:	20000072 	.word	0x20000072
 80013a4:	2000006e 	.word	0x2000006e
 80013a8:	20000052 	.word	0x20000052
 80013ac:	2000005c 	.word	0x2000005c
	  }
	  p = 1048576 - adc_P;
 80013b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013b2:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80013b6:	461a      	mov	r2, r3
 80013b8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80013bc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  p = (((p<<31) - var2)*3125) / var1;
 80013c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013c2:	105b      	asrs	r3, r3, #1
 80013c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013c8:	07db      	lsls	r3, r3, #31
 80013ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80013cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80013d0:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80013d4:	4621      	mov	r1, r4
 80013d6:	ebb1 0a02 	subs.w	sl, r1, r2
 80013da:	4629      	mov	r1, r5
 80013dc:	eb61 0b03 	sbc.w	fp, r1, r3
 80013e0:	4652      	mov	r2, sl
 80013e2:	465b      	mov	r3, fp
 80013e4:	1891      	adds	r1, r2, r2
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	415b      	adcs	r3, r3
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013f0:	eb12 020a 	adds.w	r2, r2, sl
 80013f4:	eb43 030b 	adc.w	r3, r3, fp
 80013f8:	f04f 0000 	mov.w	r0, #0
 80013fc:	f04f 0100 	mov.w	r1, #0
 8001400:	0199      	lsls	r1, r3, #6
 8001402:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8001406:	0190      	lsls	r0, r2, #6
 8001408:	1812      	adds	r2, r2, r0
 800140a:	eb41 0303 	adc.w	r3, r1, r3
 800140e:	f04f 0000 	mov.w	r0, #0
 8001412:	f04f 0100 	mov.w	r1, #0
 8001416:	0099      	lsls	r1, r3, #2
 8001418:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800141c:	0090      	lsls	r0, r2, #2
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	eb12 020a 	adds.w	r2, r2, sl
 8001426:	eb43 030b 	adc.w	r3, r3, fp
 800142a:	f04f 0000 	mov.w	r0, #0
 800142e:	f04f 0100 	mov.w	r1, #0
 8001432:	0099      	lsls	r1, r3, #2
 8001434:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001438:	0090      	lsls	r0, r2, #2
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	eb12 010a 	adds.w	r1, r2, sl
 8001442:	6339      	str	r1, [r7, #48]	; 0x30
 8001444:	eb43 030b 	adc.w	r3, r3, fp
 8001448:	637b      	str	r3, [r7, #52]	; 0x34
 800144a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800144e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001452:	f7ff faf7 	bl	8000a44 <__aeabi_ldivmod>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 800145e:	4b4c      	ldr	r3, [pc, #304]	; (8001590 <BMP280_ReadTemperatureAndPressure+0x3f0>)
 8001460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001464:	b218      	sxth	r0, r3
 8001466:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800146a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	f04f 0300 	mov.w	r3, #0
 8001476:	0b62      	lsrs	r2, r4, #13
 8001478:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 800147c:	136b      	asrs	r3, r5, #13
 800147e:	fb02 f501 	mul.w	r5, r2, r1
 8001482:	fb00 f403 	mul.w	r4, r0, r3
 8001486:	442c      	add	r4, r5
 8001488:	fba0 0102 	umull	r0, r1, r0, r2
 800148c:	1863      	adds	r3, r4, r1
 800148e:	4619      	mov	r1, r3
 8001490:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	0b62      	lsrs	r2, r4, #13
 800149e:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 80014a2:	136b      	asrs	r3, r5, #13
 80014a4:	fb02 f501 	mul.w	r5, r2, r1
 80014a8:	fb00 f403 	mul.w	r4, r0, r3
 80014ac:	442c      	add	r4, r5
 80014ae:	fba0 0102 	umull	r0, r1, r0, r2
 80014b2:	1863      	adds	r3, r4, r1
 80014b4:	4619      	mov	r1, r3
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	0e42      	lsrs	r2, r0, #25
 80014c0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80014c4:	164b      	asrs	r3, r1, #25
 80014c6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	  var2 = (((int64_t)p8) * p) >> 19;
 80014ca:	4b32      	ldr	r3, [pc, #200]	; (8001594 <BMP280_ReadTemperatureAndPressure+0x3f4>)
 80014cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d0:	b21a      	sxth	r2, r3
 80014d2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80014d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80014d8:	fb03 f001 	mul.w	r0, r3, r1
 80014dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80014de:	fb02 f101 	mul.w	r1, r2, r1
 80014e2:	1844      	adds	r4, r0, r1
 80014e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80014e6:	fba1 0102 	umull	r0, r1, r1, r2
 80014ea:	1863      	adds	r3, r4, r1
 80014ec:	4619      	mov	r1, r3
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	f04f 0300 	mov.w	r3, #0
 80014f6:	0cc2      	lsrs	r2, r0, #19
 80014f8:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80014fc:	14cb      	asrs	r3, r1, #19
 80014fe:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001502:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001506:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800150a:	1884      	adds	r4, r0, r2
 800150c:	62bc      	str	r4, [r7, #40]	; 0x28
 800150e:	eb41 0303 	adc.w	r3, r1, r3
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001514:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001518:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800151c:	4621      	mov	r1, r4
 800151e:	1889      	adds	r1, r1, r2
 8001520:	6239      	str	r1, [r7, #32]
 8001522:	4629      	mov	r1, r5
 8001524:	eb43 0101 	adc.w	r1, r3, r1
 8001528:	6279      	str	r1, [r7, #36]	; 0x24
 800152a:	f04f 0000 	mov.w	r0, #0
 800152e:	f04f 0100 	mov.w	r1, #0
 8001532:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001536:	4623      	mov	r3, r4
 8001538:	0a18      	lsrs	r0, r3, #8
 800153a:	462b      	mov	r3, r5
 800153c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001540:	462b      	mov	r3, r5
 8001542:	1219      	asrs	r1, r3, #8
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <BMP280_ReadTemperatureAndPressure+0x3f8>)
 8001546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154a:	b21c      	sxth	r4, r3
 800154c:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	012b      	lsls	r3, r5, #4
 800155a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800155e:	0122      	lsls	r2, r4, #4
 8001560:	1884      	adds	r4, r0, r2
 8001562:	603c      	str	r4, [r7, #0]
 8001564:	eb41 0303 	adc.w	r3, r1, r3
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800156e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	  *pressure = (int32_t)p/256;
 8001572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001574:	2b00      	cmp	r3, #0
 8001576:	da00      	bge.n	800157a <BMP280_ReadTemperatureAndPressure+0x3da>
 8001578:	33ff      	adds	r3, #255	; 0xff
 800157a:	121b      	asrs	r3, r3, #8
 800157c:	461a      	mov	r2, r3
 800157e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001580:	601a      	str	r2, [r3, #0]

	  return 0;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3770      	adds	r7, #112	; 0x70
 8001588:	46bd      	mov	sp, r7
 800158a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800158e:	bf00      	nop
 8001590:	20000070 	.word	0x20000070
 8001594:	2000005e 	.word	0x2000005e
 8001598:	20000054 	.word	0x20000054

0800159c <calculate_discrete_pid>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float calculate_discrete_pid(pid_t* pid, float32_t setpoint, float32_t measured){
 800159c:	b5b0      	push	{r4, r5, r7, lr}
 800159e:	b08c      	sub	sp, #48	; 0x30
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80015a8:	edc7 0a01 	vstr	s1, [r7, #4]

float32_t u=0, P, I, D, error, integral, derivative;
 80015ac:	f04f 0300 	mov.w	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
error = setpoint-measured;
 80015b2:	ed97 7a02 	vldr	s14, [r7, #8]
 80015b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015be:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
//proportional part

P = pid->p.Kp * error;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80015cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
//integral part

integral = pid->previous_integral + (error+pid->previous_error) ; //numerical integrator without anti-windup
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	ed93 7a05 	vldr	s14, [r3, #20]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	edd3 6a04 	vldr	s13, [r3, #16]
 80015e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80015e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80015e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ec:	edc7 7a08 	vstr	s15, [r7, #32]
pid->previous_integral = integral;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6a3a      	ldr	r2, [r7, #32]
 80015f4:	615a      	str	r2, [r3, #20]
I = pid->p.Ki*integral*(pid->p.dt/2.0);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80015fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001604:	ee17 0a90 	vmov	r0, s15
 8001608:	f7fe ff62 	bl	80004d0 <__aeabi_f2d>
 800160c:	4604      	mov	r4, r0
 800160e:	460d      	mov	r5, r1
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ff5b 	bl	80004d0 <__aeabi_f2d>
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001622:	f7ff f8d7 	bl	80007d4 <__aeabi_ddiv>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4620      	mov	r0, r4
 800162c:	4629      	mov	r1, r5
 800162e:	f7fe ffa7 	bl	8000580 <__aeabi_dmul>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f7ff f9b3 	bl	80009a4 <__aeabi_d2f>
 800163e:	4603      	mov	r3, r0
 8001640:	61fb      	str	r3, [r7, #28]

//derivative part
derivative = (error - pid->previous_error)/pid->p.dt; //numerical derivative without filter
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	edd3 7a04 	vldr	s15, [r3, #16]
 8001648:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800164c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	ed93 7a03 	vldr	s14, [r3, #12]
 8001656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800165a:	edc7 7a06 	vstr	s15, [r7, #24]
pid->previous_error = error;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001662:	611a      	str	r2, [r3, #16]
D = pid->p.Kd*derivative;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	edd3 7a02 	vldr	s15, [r3, #8]
 800166a:	ed97 7a06 	vldr	s14, [r7, #24]
 800166e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001672:	edc7 7a05 	vstr	s15, [r7, #20]
//sum of all parts
u = P  + I + D; //without saturation
 8001676:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800167a:	edd7 7a07 	vldr	s15, [r7, #28]
 800167e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001682:	ed97 7a05 	vldr	s14, [r7, #20]
 8001686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
return u;
 800168e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001690:	ee07 3a90 	vmov	s15, r3
}
 8001694:	eeb0 0a67 	vmov.f32	s0, s15
 8001698:	3730      	adds	r7, #48	; 0x30
 800169a:	46bd      	mov	sp, r7
 800169c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080016a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a4:	f000 fcd9 	bl	800205a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a8:	f000 f870 	bl	800178c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ac:	f000 f9ce 	bl	8001a4c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80016b0:	f000 f96e 	bl	8001990 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80016b4:	f000 f99c 	bl	80019f0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 80016b8:	f000 f8d0 	bl	800185c <MX_I2C2_Init>
  MX_TIM4_Init();
 80016bc:	f000 f90e 	bl	80018dc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80016c0:	210c      	movs	r1, #12
 80016c2:	4829      	ldr	r0, [pc, #164]	; (8001768 <main+0xc8>)
 80016c4:	f003 f838 	bl	8004738 <HAL_TIM_PWM_Start>
  BMP280_Init(&hi2c2, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 80016c8:	2301      	movs	r3, #1
 80016ca:	2203      	movs	r2, #3
 80016cc:	2101      	movs	r1, #1
 80016ce:	4827      	ldr	r0, [pc, #156]	; (800176c <main+0xcc>)
 80016d0:	f7ff fc1c 	bl	8000f0c <BMP280_Init>

    /* USER CODE BEGIN 3 */

  //temperature = BMP280_ReadTemperature();
  //HAL_Delay(200);
	  BMP280_ReadTemperatureAndPressure(&temp, &pres);
 80016d4:	4926      	ldr	r1, [pc, #152]	; (8001770 <main+0xd0>)
 80016d6:	4827      	ldr	r0, [pc, #156]	; (8001774 <main+0xd4>)
 80016d8:	f7ff fd62 	bl	80011a0 <BMP280_ReadTemperatureAndPressure>
	  pwm_duty_f=(999.0*calculate_discrete_pid(&pid1,temp_zad,temp));
 80016dc:	4b26      	ldr	r3, [pc, #152]	; (8001778 <main+0xd8>)
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	4b24      	ldr	r3, [pc, #144]	; (8001774 <main+0xd4>)
 80016e4:	ed93 7a00 	vldr	s14, [r3]
 80016e8:	eef0 0a47 	vmov.f32	s1, s14
 80016ec:	eeb0 0a67 	vmov.f32	s0, s15
 80016f0:	4822      	ldr	r0, [pc, #136]	; (800177c <main+0xdc>)
 80016f2:	f7ff ff53 	bl	800159c <calculate_discrete_pid>
 80016f6:	eef0 7a40 	vmov.f32	s15, s0
 80016fa:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001780 <main+0xe0>
 80016fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <main+0xe4>)
 8001704:	edc3 7a00 	vstr	s15, [r3]
	  if (pwm_duty_f<0) {
 8001708:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <main+0xe4>)
 800170a:	edd3 7a00 	vldr	s15, [r3]
 800170e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001716:	d503      	bpl.n	8001720 <main+0x80>
		  pwm_duty=0;
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <main+0xe8>)
 800171a:	2200      	movs	r2, #0
 800171c:	801a      	strh	r2, [r3, #0]
 800171e:	e018      	b.n	8001752 <main+0xb2>
	  }
	  else if (pwm_duty_f>999.0) {
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <main+0xe4>)
 8001722:	edd3 7a00 	vldr	s15, [r3]
 8001726:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001780 <main+0xe0>
 800172a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800172e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001732:	dd04      	ble.n	800173e <main+0x9e>
		  pwm_duty=999;
 8001734:	4b14      	ldr	r3, [pc, #80]	; (8001788 <main+0xe8>)
 8001736:	f240 32e7 	movw	r2, #999	; 0x3e7
 800173a:	801a      	strh	r2, [r3, #0]
 800173c:	e009      	b.n	8001752 <main+0xb2>
	  }
	  else {
		  pwm_duty = (uint16_t)pwm_duty_f;
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <main+0xe4>)
 8001740:	edd3 7a00 	vldr	s15, [r3]
 8001744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001748:	ee17 3a90 	vmov	r3, s15
 800174c:	b29a      	uxth	r2, r3
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <main+0xe8>)
 8001750:	801a      	strh	r2, [r3, #0]
	  }
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,pwm_duty);
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <main+0xe8>)
 8001754:	881a      	ldrh	r2, [r3, #0]
 8001756:	4b04      	ldr	r3, [pc, #16]	; (8001768 <main+0xc8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(1000);
 800175c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001760:	f000 fcd8 	bl	8002114 <HAL_Delay>
	  BMP280_ReadTemperatureAndPressure(&temp, &pres);
 8001764:	e7b6      	b.n	80016d4 <main+0x34>
 8001766:	bf00      	nop
 8001768:	2000007c 	.word	0x2000007c
 800176c:	20000550 	.word	0x20000550
 8001770:	20000078 	.word	0x20000078
 8001774:	20000044 	.word	0x20000044
 8001778:	20000000 	.word	0x20000000
 800177c:	20000004 	.word	0x20000004
 8001780:	4479c000 	.word	0x4479c000
 8001784:	20000048 	.word	0x20000048
 8001788:	2000004c 	.word	0x2000004c

0800178c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b094      	sub	sp, #80	; 0x50
 8001790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001792:	f107 0320 	add.w	r3, r7, #32
 8001796:	2230      	movs	r2, #48	; 0x30
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f004 fce8 	bl	8006170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80017b0:	f001 fec4 	bl	800353c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b4:	4b27      	ldr	r3, [pc, #156]	; (8001854 <SystemClock_Config+0xc8>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	4a26      	ldr	r2, [pc, #152]	; (8001854 <SystemClock_Config+0xc8>)
 80017ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017be:	6413      	str	r3, [r2, #64]	; 0x40
 80017c0:	4b24      	ldr	r3, [pc, #144]	; (8001854 <SystemClock_Config+0xc8>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017cc:	4b22      	ldr	r3, [pc, #136]	; (8001858 <SystemClock_Config+0xcc>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017d4:	4a20      	ldr	r2, [pc, #128]	; (8001858 <SystemClock_Config+0xcc>)
 80017d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <SystemClock_Config+0xcc>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017e8:	2301      	movs	r3, #1
 80017ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017ec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f2:	2302      	movs	r3, #2
 80017f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017fc:	2304      	movs	r3, #4
 80017fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001800:	2348      	movs	r3, #72	; 0x48
 8001802:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001804:	2302      	movs	r3, #2
 8001806:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001808:	2303      	movs	r3, #3
 800180a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180c:	f107 0320 	add.w	r3, r7, #32
 8001810:	4618      	mov	r0, r3
 8001812:	f001 fea3 	bl	800355c <HAL_RCC_OscConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800181c:	f000 f9fc 	bl	8001c18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001820:	230f      	movs	r3, #15
 8001822:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001824:	2302      	movs	r3, #2
 8001826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800182c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001830:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	2102      	movs	r1, #2
 800183c:	4618      	mov	r0, r3
 800183e:	f002 f931 	bl	8003aa4 <HAL_RCC_ClockConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001848:	f000 f9e6 	bl	8001c18 <Error_Handler>
  }
}
 800184c:	bf00      	nop
 800184e:	3750      	adds	r7, #80	; 0x50
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800
 8001858:	40007000 	.word	0x40007000

0800185c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001860:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <MX_I2C2_Init+0x74>)
 8001862:	4a1c      	ldr	r2, [pc, #112]	; (80018d4 <MX_I2C2_Init+0x78>)
 8001864:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8001866:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <MX_I2C2_Init+0x74>)
 8001868:	4a1b      	ldr	r2, [pc, #108]	; (80018d8 <MX_I2C2_Init+0x7c>)
 800186a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800186c:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <MX_I2C2_Init+0x74>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <MX_I2C2_Init+0x74>)
 8001874:	2201      	movs	r2, #1
 8001876:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <MX_I2C2_Init+0x74>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <MX_I2C2_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <MX_I2C2_Init+0x74>)
 8001886:	2200      	movs	r2, #0
 8001888:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <MX_I2C2_Init+0x74>)
 800188c:	2200      	movs	r2, #0
 800188e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <MX_I2C2_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001896:	480e      	ldr	r0, [pc, #56]	; (80018d0 <MX_I2C2_Init+0x74>)
 8001898:	f000 ff0c 	bl	80026b4 <HAL_I2C_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80018a2:	f000 f9b9 	bl	8001c18 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018a6:	2100      	movs	r1, #0
 80018a8:	4809      	ldr	r0, [pc, #36]	; (80018d0 <MX_I2C2_Init+0x74>)
 80018aa:	f001 fc67 	bl	800317c <HAL_I2CEx_ConfigAnalogFilter>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80018b4:	f000 f9b0 	bl	8001c18 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80018b8:	2100      	movs	r1, #0
 80018ba:	4805      	ldr	r0, [pc, #20]	; (80018d0 <MX_I2C2_Init+0x74>)
 80018bc:	f001 fca9 	bl	8003212 <HAL_I2CEx_ConfigDigitalFilter>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80018c6:	f000 f9a7 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000550 	.word	0x20000550
 80018d4:	40005800 	.word	0x40005800
 80018d8:	00808cd2 	.word	0x00808cd2

080018dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ee:	463b      	mov	r3, r7
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
 80018fc:	615a      	str	r2, [r3, #20]
 80018fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001900:	4b21      	ldr	r3, [pc, #132]	; (8001988 <MX_TIM4_Init+0xac>)
 8001902:	4a22      	ldr	r2, [pc, #136]	; (800198c <MX_TIM4_Init+0xb0>)
 8001904:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001906:	4b20      	ldr	r3, [pc, #128]	; (8001988 <MX_TIM4_Init+0xac>)
 8001908:	2247      	movs	r2, #71	; 0x47
 800190a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190c:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <MX_TIM4_Init+0xac>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001912:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <MX_TIM4_Init+0xac>)
 8001914:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001918:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191a:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <MX_TIM4_Init+0xac>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <MX_TIM4_Init+0xac>)
 8001922:	2280      	movs	r2, #128	; 0x80
 8001924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001926:	4818      	ldr	r0, [pc, #96]	; (8001988 <MX_TIM4_Init+0xac>)
 8001928:	f002 feae 	bl	8004688 <HAL_TIM_PWM_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001932:	f000 f971 	bl	8001c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800193e:	f107 031c 	add.w	r3, r7, #28
 8001942:	4619      	mov	r1, r3
 8001944:	4810      	ldr	r0, [pc, #64]	; (8001988 <MX_TIM4_Init+0xac>)
 8001946:	f003 fc29 	bl	800519c <HAL_TIMEx_MasterConfigSynchronization>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001950:	f000 f962 	bl	8001c18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001954:	2360      	movs	r3, #96	; 0x60
 8001956:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800195c:	2300      	movs	r3, #0
 800195e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001964:	463b      	mov	r3, r7
 8001966:	220c      	movs	r2, #12
 8001968:	4619      	mov	r1, r3
 800196a:	4807      	ldr	r0, [pc, #28]	; (8001988 <MX_TIM4_Init+0xac>)
 800196c:	f002 ffde 	bl	800492c <HAL_TIM_PWM_ConfigChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001976:	f000 f94f 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800197a:	4803      	ldr	r0, [pc, #12]	; (8001988 <MX_TIM4_Init+0xac>)
 800197c:	f000 f9f6 	bl	8001d6c <HAL_TIM_MspPostInit>

}
 8001980:	bf00      	nop
 8001982:	3728      	adds	r7, #40	; 0x28
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	2000007c 	.word	0x2000007c
 800198c:	40000800 	.word	0x40000800

08001990 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <MX_USART3_UART_Init+0x58>)
 8001996:	4a15      	ldr	r2, [pc, #84]	; (80019ec <MX_USART3_UART_Init+0x5c>)
 8001998:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800199a:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <MX_USART3_UART_Init+0x58>)
 800199c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <MX_USART3_UART_Init+0x58>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <MX_USART3_UART_Init+0x58>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <MX_USART3_UART_Init+0x58>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_USART3_UART_Init+0x58>)
 80019b6:	220c      	movs	r2, #12
 80019b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <MX_USART3_UART_Init+0x58>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_USART3_UART_Init+0x58>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <MX_USART3_UART_Init+0x58>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_USART3_UART_Init+0x58>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019d2:	4805      	ldr	r0, [pc, #20]	; (80019e8 <MX_USART3_UART_Init+0x58>)
 80019d4:	f003 fc70 	bl	80052b8 <HAL_UART_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80019de:	f000 f91b 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200000c8 	.word	0x200000c8
 80019ec:	40004800 	.word	0x40004800

080019f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80019fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019fe:	2206      	movs	r2, #6
 8001a00:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a04:	2202      	movs	r2, #2
 8001a06:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a10:	2202      	movs	r2, #2
 8001a12:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a34:	f001 fc39 	bl	80032aa <HAL_PCD_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001a3e:	f000 f8eb 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000014c 	.word	0x2000014c

08001a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08c      	sub	sp, #48	; 0x30
 8001a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
 8001a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a62:	4b68      	ldr	r3, [pc, #416]	; (8001c04 <MX_GPIO_Init+0x1b8>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a67      	ldr	r2, [pc, #412]	; (8001c04 <MX_GPIO_Init+0x1b8>)
 8001a68:	f043 0304 	orr.w	r3, r3, #4
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b65      	ldr	r3, [pc, #404]	; (8001c04 <MX_GPIO_Init+0x1b8>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	61bb      	str	r3, [r7, #24]
 8001a78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a7a:	4b62      	ldr	r3, [pc, #392]	; (8001c04 <MX_GPIO_Init+0x1b8>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a61      	ldr	r2, [pc, #388]	; (8001c04 <MX_GPIO_Init+0x1b8>)
 8001a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b5f      	ldr	r3, [pc, #380]	; (8001c04 <MX_GPIO_Init+0x1b8>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	4b5c      	ldr	r3, [pc, #368]	; (8001c04 <MX_GPIO_Init+0x1b8>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a5b      	ldr	r2, [pc, #364]	; (8001c04 <MX_GPIO_Init+0x1b8>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b59      	ldr	r3, [pc, #356]	; (8001c04 <MX_GPIO_Init+0x1b8>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	4b56      	ldr	r3, [pc, #344]	; (8001c04 <MX_GPIO_Init+0x1b8>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a55      	ldr	r2, [pc, #340]	; (8001c04 <MX_GPIO_Init+0x1b8>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b53      	ldr	r3, [pc, #332]	; (8001c04 <MX_GPIO_Init+0x1b8>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac2:	4b50      	ldr	r3, [pc, #320]	; (8001c04 <MX_GPIO_Init+0x1b8>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a4f      	ldr	r2, [pc, #316]	; (8001c04 <MX_GPIO_Init+0x1b8>)
 8001ac8:	f043 0308 	orr.w	r3, r3, #8
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b4d      	ldr	r3, [pc, #308]	; (8001c04 <MX_GPIO_Init+0x1b8>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ada:	4b4a      	ldr	r3, [pc, #296]	; (8001c04 <MX_GPIO_Init+0x1b8>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a49      	ldr	r2, [pc, #292]	; (8001c04 <MX_GPIO_Init+0x1b8>)
 8001ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b47      	ldr	r3, [pc, #284]	; (8001c04 <MX_GPIO_Init+0x1b8>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001af2:	2200      	movs	r2, #0
 8001af4:	f244 0181 	movw	r1, #16513	; 0x4081
 8001af8:	4843      	ldr	r0, [pc, #268]	; (8001c08 <MX_GPIO_Init+0x1bc>)
 8001afa:	f000 fdc1 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2140      	movs	r1, #64	; 0x40
 8001b02:	4842      	ldr	r0, [pc, #264]	; (8001c0c <MX_GPIO_Init+0x1c0>)
 8001b04:	f000 fdbc 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001b18:	f107 031c 	add.w	r3, r7, #28
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	483c      	ldr	r0, [pc, #240]	; (8001c10 <MX_GPIO_Init+0x1c4>)
 8001b20:	f000 fc02 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001b24:	2332      	movs	r3, #50	; 0x32
 8001b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b30:	2303      	movs	r3, #3
 8001b32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b34:	230b      	movs	r3, #11
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b38:	f107 031c 	add.w	r3, r7, #28
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4834      	ldr	r0, [pc, #208]	; (8001c10 <MX_GPIO_Init+0x1c4>)
 8001b40:	f000 fbf2 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001b44:	2386      	movs	r3, #134	; 0x86
 8001b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b50:	2303      	movs	r3, #3
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b54:	230b      	movs	r3, #11
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	482d      	ldr	r0, [pc, #180]	; (8001c14 <MX_GPIO_Init+0x1c8>)
 8001b60:	f000 fbe2 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001b64:	f244 0381 	movw	r3, #16513	; 0x4081
 8001b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4822      	ldr	r0, [pc, #136]	; (8001c08 <MX_GPIO_Init+0x1bc>)
 8001b7e:	f000 fbd3 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001b82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b90:	2303      	movs	r3, #3
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b94:	230b      	movs	r3, #11
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	481a      	ldr	r0, [pc, #104]	; (8001c08 <MX_GPIO_Init+0x1bc>)
 8001ba0:	f000 fbc2 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001ba4:	2340      	movs	r3, #64	; 0x40
 8001ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4814      	ldr	r0, [pc, #80]	; (8001c0c <MX_GPIO_Init+0x1c0>)
 8001bbc:	f000 fbb4 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	480e      	ldr	r0, [pc, #56]	; (8001c0c <MX_GPIO_Init+0x1c0>)
 8001bd4:	f000 fba8 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001bd8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be6:	2303      	movs	r3, #3
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bea:	230b      	movs	r3, #11
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bee:	f107 031c 	add.w	r3, r7, #28
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4805      	ldr	r0, [pc, #20]	; (8001c0c <MX_GPIO_Init+0x1c0>)
 8001bf6:	f000 fb97 	bl	8002328 <HAL_GPIO_Init>

}
 8001bfa:	bf00      	nop
 8001bfc:	3730      	adds	r7, #48	; 0x30
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	40021800 	.word	0x40021800
 8001c10:	40020800 	.word	0x40020800
 8001c14:	40020000 	.word	0x40020000

08001c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c1c:	b672      	cpsid	i
}
 8001c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <Error_Handler+0x8>
	...

08001c24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <HAL_MspInit+0x44>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <HAL_MspInit+0x44>)
 8001c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c34:	6413      	str	r3, [r2, #64]	; 0x40
 8001c36:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <HAL_MspInit+0x44>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_MspInit+0x44>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	4a08      	ldr	r2, [pc, #32]	; (8001c68 <HAL_MspInit+0x44>)
 8001c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_MspInit+0x44>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800

08001c6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b0aa      	sub	sp, #168	; 0xa8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	2284      	movs	r2, #132	; 0x84
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f004 fa6f 	bl	8006170 <memset>
  if(hi2c->Instance==I2C2)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a22      	ldr	r2, [pc, #136]	; (8001d20 <HAL_I2C_MspInit+0xb4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d13c      	bne.n	8001d16 <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ca0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca6:	f107 0310 	add.w	r3, r7, #16
 8001caa:	4618      	mov	r0, r3
 8001cac:	f002 f8fc 	bl	8003ea8 <HAL_RCCEx_PeriphCLKConfig>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001cb6:	f7ff ffaf 	bl	8001c18 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cba:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <HAL_I2C_MspInit+0xb8>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a19      	ldr	r2, [pc, #100]	; (8001d24 <HAL_I2C_MspInit+0xb8>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <HAL_I2C_MspInit+0xb8>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001cd2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cda:	2312      	movs	r3, #18
 8001cdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cec:	2304      	movs	r3, #4
 8001cee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	480b      	ldr	r0, [pc, #44]	; (8001d28 <HAL_I2C_MspInit+0xbc>)
 8001cfa:	f000 fb15 	bl	8002328 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_I2C_MspInit+0xb8>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <HAL_I2C_MspInit+0xb8>)
 8001d04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d08:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_I2C_MspInit+0xb8>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d16:	bf00      	nop
 8001d18:	37a8      	adds	r7, #168	; 0xa8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40005800 	.word	0x40005800
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020400 	.word	0x40020400

08001d2c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <HAL_TIM_PWM_MspInit+0x38>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d10b      	bne.n	8001d56 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4a09      	ldr	r2, [pc, #36]	; (8001d68 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d44:	f043 0304 	orr.w	r3, r3, #4
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d56:	bf00      	nop
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40000800 	.word	0x40000800
 8001d68:	40023800 	.word	0x40023800

08001d6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a11      	ldr	r2, [pc, #68]	; (8001dd0 <HAL_TIM_MspPostInit+0x64>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d11c      	bne.n	8001dc8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <HAL_TIM_MspPostInit+0x68>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a10      	ldr	r2, [pc, #64]	; (8001dd4 <HAL_TIM_MspPostInit+0x68>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <HAL_TIM_MspPostInit+0x68>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001da6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001daa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001db8:	2302      	movs	r3, #2
 8001dba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbc:	f107 030c 	add.w	r3, r7, #12
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <HAL_TIM_MspPostInit+0x6c>)
 8001dc4:	f000 fab0 	bl	8002328 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001dc8:	bf00      	nop
 8001dca:	3720      	adds	r7, #32
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40000800 	.word	0x40000800
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020400 	.word	0x40020400

08001ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b0aa      	sub	sp, #168	; 0xa8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001df4:	f107 0310 	add.w	r3, r7, #16
 8001df8:	2284      	movs	r2, #132	; 0x84
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f004 f9b7 	bl	8006170 <memset>
  if(huart->Instance==USART3)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a22      	ldr	r2, [pc, #136]	; (8001e90 <HAL_UART_MspInit+0xb4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d13c      	bne.n	8001e86 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e10:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e12:	2300      	movs	r3, #0
 8001e14:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e16:	f107 0310 	add.w	r3, r7, #16
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f002 f844 	bl	8003ea8 <HAL_RCCEx_PeriphCLKConfig>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e26:	f7ff fef7 	bl	8001c18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <HAL_UART_MspInit+0xb8>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	4a19      	ldr	r2, [pc, #100]	; (8001e94 <HAL_UART_MspInit+0xb8>)
 8001e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e34:	6413      	str	r3, [r2, #64]	; 0x40
 8001e36:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <HAL_UART_MspInit+0xb8>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e42:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <HAL_UART_MspInit+0xb8>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a13      	ldr	r2, [pc, #76]	; (8001e94 <HAL_UART_MspInit+0xb8>)
 8001e48:	f043 0308 	orr.w	r3, r3, #8
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <HAL_UART_MspInit+0xb8>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001e5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e74:	2307      	movs	r3, #7
 8001e76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e7a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4805      	ldr	r0, [pc, #20]	; (8001e98 <HAL_UART_MspInit+0xbc>)
 8001e82:	f000 fa51 	bl	8002328 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e86:	bf00      	nop
 8001e88:	37a8      	adds	r7, #168	; 0xa8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40004800 	.word	0x40004800
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020c00 	.word	0x40020c00

08001e9c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b0ac      	sub	sp, #176	; 0xb0
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eb4:	f107 0318 	add.w	r3, r7, #24
 8001eb8:	2284      	movs	r2, #132	; 0x84
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f004 f957 	bl	8006170 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eca:	d159      	bne.n	8001f80 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001ecc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ed0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ed8:	f107 0318 	add.w	r3, r7, #24
 8001edc:	4618      	mov	r0, r3
 8001ede:	f001 ffe3 	bl	8003ea8 <HAL_RCCEx_PeriphCLKConfig>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001ee8:	f7ff fe96 	bl	8001c18 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eec:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <HAL_PCD_MspInit+0xec>)
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	4a25      	ldr	r2, [pc, #148]	; (8001f88 <HAL_PCD_MspInit+0xec>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef8:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <HAL_PCD_MspInit+0xec>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001f04:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001f08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f1e:	230a      	movs	r3, #10
 8001f20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4818      	ldr	r0, [pc, #96]	; (8001f8c <HAL_PCD_MspInit+0xf0>)
 8001f2c:	f000 f9fc 	bl	8002328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001f30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4810      	ldr	r0, [pc, #64]	; (8001f8c <HAL_PCD_MspInit+0xf0>)
 8001f4c:	f000 f9ec 	bl	8002328 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f50:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <HAL_PCD_MspInit+0xec>)
 8001f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f54:	4a0c      	ldr	r2, [pc, #48]	; (8001f88 <HAL_PCD_MspInit+0xec>)
 8001f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f5a:	6353      	str	r3, [r2, #52]	; 0x34
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_PCD_MspInit+0xec>)
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <HAL_PCD_MspInit+0xec>)
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	4a06      	ldr	r2, [pc, #24]	; (8001f88 <HAL_PCD_MspInit+0xec>)
 8001f6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f72:	6453      	str	r3, [r2, #68]	; 0x44
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <HAL_PCD_MspInit+0xec>)
 8001f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001f80:	bf00      	nop
 8001f82:	37b0      	adds	r7, #176	; 0xb0
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40020000 	.word	0x40020000

08001f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f94:	e7fe      	b.n	8001f94 <NMI_Handler+0x4>

08001f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9a:	e7fe      	b.n	8001f9a <HardFault_Handler+0x4>

08001f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <MemManage_Handler+0x4>

08001fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa6:	e7fe      	b.n	8001fa6 <BusFault_Handler+0x4>

08001fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fac:	e7fe      	b.n	8001fac <UsageFault_Handler+0x4>

08001fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fdc:	f000 f87a 	bl	80020d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <SystemInit+0x20>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fee:	4a05      	ldr	r2, [pc, #20]	; (8002004 <SystemInit+0x20>)
 8001ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002008:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002040 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800200c:	480d      	ldr	r0, [pc, #52]	; (8002044 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800200e:	490e      	ldr	r1, [pc, #56]	; (8002048 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002010:	4a0e      	ldr	r2, [pc, #56]	; (800204c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002014:	e002      	b.n	800201c <LoopCopyDataInit>

08002016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800201a:	3304      	adds	r3, #4

0800201c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800201c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800201e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002020:	d3f9      	bcc.n	8002016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002022:	4a0b      	ldr	r2, [pc, #44]	; (8002050 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002024:	4c0b      	ldr	r4, [pc, #44]	; (8002054 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002028:	e001      	b.n	800202e <LoopFillZerobss>

0800202a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800202a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800202c:	3204      	adds	r2, #4

0800202e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800202e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002030:	d3fb      	bcc.n	800202a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002032:	f7ff ffd7 	bl	8001fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002036:	f004 f877 	bl	8006128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800203a:	f7ff fb31 	bl	80016a0 <main>
  bx  lr    
 800203e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002040:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002048:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800204c:	080061c0 	.word	0x080061c0
  ldr r2, =_sbss
 8002050:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002054:	200005a0 	.word	0x200005a0

08002058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002058:	e7fe      	b.n	8002058 <ADC_IRQHandler>

0800205a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800205e:	2003      	movs	r0, #3
 8002060:	f000 f92e 	bl	80022c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002064:	2000      	movs	r0, #0
 8002066:	f000 f805 	bl	8002074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800206a:	f7ff fddb 	bl	8001c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_InitTick+0x54>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_InitTick+0x58>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	4619      	mov	r1, r3
 8002086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800208a:	fbb3 f3f1 	udiv	r3, r3, r1
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	4618      	mov	r0, r3
 8002094:	f000 f93b 	bl	800230e <HAL_SYSTICK_Config>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e00e      	b.n	80020c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b0f      	cmp	r3, #15
 80020a6:	d80a      	bhi.n	80020be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a8:	2200      	movs	r2, #0
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f000 f911 	bl	80022d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b4:	4a06      	ldr	r2, [pc, #24]	; (80020d0 <HAL_InitTick+0x5c>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	e000      	b.n	80020c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	2000001c 	.word	0x2000001c
 80020cc:	20000024 	.word	0x20000024
 80020d0:	20000020 	.word	0x20000020

080020d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_IncTick+0x20>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_IncTick+0x24>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <HAL_IncTick+0x24>)
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000024 	.word	0x20000024
 80020f8:	2000059c 	.word	0x2000059c

080020fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002100:	4b03      	ldr	r3, [pc, #12]	; (8002110 <HAL_GetTick+0x14>)
 8002102:	681b      	ldr	r3, [r3, #0]
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	2000059c 	.word	0x2000059c

08002114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800211c:	f7ff ffee 	bl	80020fc <HAL_GetTick>
 8002120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212c:	d005      	beq.n	800213a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_Delay+0x44>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4413      	add	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800213a:	bf00      	nop
 800213c:	f7ff ffde 	bl	80020fc <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	429a      	cmp	r2, r3
 800214a:	d8f7      	bhi.n	800213c <HAL_Delay+0x28>
  {
  }
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000024 	.word	0x20000024

0800215c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <__NVIC_SetPriorityGrouping+0x40>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002178:	4013      	ands	r3, r2
 800217a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002186:	4313      	orrs	r3, r2
 8002188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800218a:	4a04      	ldr	r2, [pc, #16]	; (800219c <__NVIC_SetPriorityGrouping+0x40>)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	60d3      	str	r3, [r2, #12]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000ed00 	.word	0xe000ed00
 80021a0:	05fa0000 	.word	0x05fa0000

080021a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <__NVIC_GetPriorityGrouping+0x18>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	0a1b      	lsrs	r3, r3, #8
 80021ae:	f003 0307 	and.w	r3, r3, #7
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	6039      	str	r1, [r7, #0]
 80021ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	db0a      	blt.n	80021ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	490c      	ldr	r1, [pc, #48]	; (800220c <__NVIC_SetPriority+0x4c>)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	0112      	lsls	r2, r2, #4
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	440b      	add	r3, r1
 80021e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e8:	e00a      	b.n	8002200 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	4908      	ldr	r1, [pc, #32]	; (8002210 <__NVIC_SetPriority+0x50>)
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	3b04      	subs	r3, #4
 80021f8:	0112      	lsls	r2, r2, #4
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	440b      	add	r3, r1
 80021fe:	761a      	strb	r2, [r3, #24]
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000e100 	.word	0xe000e100
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	; 0x24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f1c3 0307 	rsb	r3, r3, #7
 800222e:	2b04      	cmp	r3, #4
 8002230:	bf28      	it	cs
 8002232:	2304      	movcs	r3, #4
 8002234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3304      	adds	r3, #4
 800223a:	2b06      	cmp	r3, #6
 800223c:	d902      	bls.n	8002244 <NVIC_EncodePriority+0x30>
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3b03      	subs	r3, #3
 8002242:	e000      	b.n	8002246 <NVIC_EncodePriority+0x32>
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002248:	f04f 32ff 	mov.w	r2, #4294967295
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43da      	mvns	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	401a      	ands	r2, r3
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800225c:	f04f 31ff 	mov.w	r1, #4294967295
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	fa01 f303 	lsl.w	r3, r1, r3
 8002266:	43d9      	mvns	r1, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	4313      	orrs	r3, r2
         );
}
 800226e:	4618      	mov	r0, r3
 8002270:	3724      	adds	r7, #36	; 0x24
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3b01      	subs	r3, #1
 8002288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800228c:	d301      	bcc.n	8002292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800228e:	2301      	movs	r3, #1
 8002290:	e00f      	b.n	80022b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002292:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <SysTick_Config+0x40>)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3b01      	subs	r3, #1
 8002298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229a:	210f      	movs	r1, #15
 800229c:	f04f 30ff 	mov.w	r0, #4294967295
 80022a0:	f7ff ff8e 	bl	80021c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <SysTick_Config+0x40>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022aa:	4b04      	ldr	r3, [pc, #16]	; (80022bc <SysTick_Config+0x40>)
 80022ac:	2207      	movs	r2, #7
 80022ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	e000e010 	.word	0xe000e010

080022c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff ff47 	bl	800215c <__NVIC_SetPriorityGrouping>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b086      	sub	sp, #24
 80022da:	af00      	add	r7, sp, #0
 80022dc:	4603      	mov	r3, r0
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
 80022e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e8:	f7ff ff5c 	bl	80021a4 <__NVIC_GetPriorityGrouping>
 80022ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	6978      	ldr	r0, [r7, #20]
 80022f4:	f7ff ff8e 	bl	8002214 <NVIC_EncodePriority>
 80022f8:	4602      	mov	r2, r0
 80022fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fe:	4611      	mov	r1, r2
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff5d 	bl	80021c0 <__NVIC_SetPriority>
}
 8002306:	bf00      	nop
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff ffb0 	bl	800227c <SysTick_Config>
 800231c:	4603      	mov	r3, r0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002328:	b480      	push	{r7}
 800232a:	b089      	sub	sp, #36	; 0x24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	e175      	b.n	8002634 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002348:	2201      	movs	r2, #1
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	4013      	ands	r3, r2
 800235a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	429a      	cmp	r2, r3
 8002362:	f040 8164 	bne.w	800262e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	2b01      	cmp	r3, #1
 8002370:	d005      	beq.n	800237e <HAL_GPIO_Init+0x56>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d130      	bne.n	80023e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	2203      	movs	r2, #3
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023b4:	2201      	movs	r2, #1
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	f003 0201 	and.w	r2, r3, #1
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d017      	beq.n	800241c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	2203      	movs	r2, #3
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d123      	bne.n	8002470 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	08da      	lsrs	r2, r3, #3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3208      	adds	r2, #8
 8002430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	220f      	movs	r2, #15
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	08da      	lsrs	r2, r3, #3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3208      	adds	r2, #8
 800246a:	69b9      	ldr	r1, [r7, #24]
 800246c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	2203      	movs	r2, #3
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 0203 	and.w	r2, r3, #3
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 80be 	beq.w	800262e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b2:	4b66      	ldr	r3, [pc, #408]	; (800264c <HAL_GPIO_Init+0x324>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	4a65      	ldr	r2, [pc, #404]	; (800264c <HAL_GPIO_Init+0x324>)
 80024b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024bc:	6453      	str	r3, [r2, #68]	; 0x44
 80024be:	4b63      	ldr	r3, [pc, #396]	; (800264c <HAL_GPIO_Init+0x324>)
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80024ca:	4a61      	ldr	r2, [pc, #388]	; (8002650 <HAL_GPIO_Init+0x328>)
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	089b      	lsrs	r3, r3, #2
 80024d0:	3302      	adds	r3, #2
 80024d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	220f      	movs	r2, #15
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a58      	ldr	r2, [pc, #352]	; (8002654 <HAL_GPIO_Init+0x32c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d037      	beq.n	8002566 <HAL_GPIO_Init+0x23e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a57      	ldr	r2, [pc, #348]	; (8002658 <HAL_GPIO_Init+0x330>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d031      	beq.n	8002562 <HAL_GPIO_Init+0x23a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a56      	ldr	r2, [pc, #344]	; (800265c <HAL_GPIO_Init+0x334>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d02b      	beq.n	800255e <HAL_GPIO_Init+0x236>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a55      	ldr	r2, [pc, #340]	; (8002660 <HAL_GPIO_Init+0x338>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d025      	beq.n	800255a <HAL_GPIO_Init+0x232>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a54      	ldr	r2, [pc, #336]	; (8002664 <HAL_GPIO_Init+0x33c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d01f      	beq.n	8002556 <HAL_GPIO_Init+0x22e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a53      	ldr	r2, [pc, #332]	; (8002668 <HAL_GPIO_Init+0x340>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d019      	beq.n	8002552 <HAL_GPIO_Init+0x22a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a52      	ldr	r2, [pc, #328]	; (800266c <HAL_GPIO_Init+0x344>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d013      	beq.n	800254e <HAL_GPIO_Init+0x226>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a51      	ldr	r2, [pc, #324]	; (8002670 <HAL_GPIO_Init+0x348>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00d      	beq.n	800254a <HAL_GPIO_Init+0x222>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a50      	ldr	r2, [pc, #320]	; (8002674 <HAL_GPIO_Init+0x34c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d007      	beq.n	8002546 <HAL_GPIO_Init+0x21e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a4f      	ldr	r2, [pc, #316]	; (8002678 <HAL_GPIO_Init+0x350>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d101      	bne.n	8002542 <HAL_GPIO_Init+0x21a>
 800253e:	2309      	movs	r3, #9
 8002540:	e012      	b.n	8002568 <HAL_GPIO_Init+0x240>
 8002542:	230a      	movs	r3, #10
 8002544:	e010      	b.n	8002568 <HAL_GPIO_Init+0x240>
 8002546:	2308      	movs	r3, #8
 8002548:	e00e      	b.n	8002568 <HAL_GPIO_Init+0x240>
 800254a:	2307      	movs	r3, #7
 800254c:	e00c      	b.n	8002568 <HAL_GPIO_Init+0x240>
 800254e:	2306      	movs	r3, #6
 8002550:	e00a      	b.n	8002568 <HAL_GPIO_Init+0x240>
 8002552:	2305      	movs	r3, #5
 8002554:	e008      	b.n	8002568 <HAL_GPIO_Init+0x240>
 8002556:	2304      	movs	r3, #4
 8002558:	e006      	b.n	8002568 <HAL_GPIO_Init+0x240>
 800255a:	2303      	movs	r3, #3
 800255c:	e004      	b.n	8002568 <HAL_GPIO_Init+0x240>
 800255e:	2302      	movs	r3, #2
 8002560:	e002      	b.n	8002568 <HAL_GPIO_Init+0x240>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_GPIO_Init+0x240>
 8002566:	2300      	movs	r3, #0
 8002568:	69fa      	ldr	r2, [r7, #28]
 800256a:	f002 0203 	and.w	r2, r2, #3
 800256e:	0092      	lsls	r2, r2, #2
 8002570:	4093      	lsls	r3, r2
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002578:	4935      	ldr	r1, [pc, #212]	; (8002650 <HAL_GPIO_Init+0x328>)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	089b      	lsrs	r3, r3, #2
 800257e:	3302      	adds	r3, #2
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002586:	4b3d      	ldr	r3, [pc, #244]	; (800267c <HAL_GPIO_Init+0x354>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025aa:	4a34      	ldr	r2, [pc, #208]	; (800267c <HAL_GPIO_Init+0x354>)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b0:	4b32      	ldr	r3, [pc, #200]	; (800267c <HAL_GPIO_Init+0x354>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025d4:	4a29      	ldr	r2, [pc, #164]	; (800267c <HAL_GPIO_Init+0x354>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025da:	4b28      	ldr	r3, [pc, #160]	; (800267c <HAL_GPIO_Init+0x354>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025fe:	4a1f      	ldr	r2, [pc, #124]	; (800267c <HAL_GPIO_Init+0x354>)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002604:	4b1d      	ldr	r3, [pc, #116]	; (800267c <HAL_GPIO_Init+0x354>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002628:	4a14      	ldr	r2, [pc, #80]	; (800267c <HAL_GPIO_Init+0x354>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3301      	adds	r3, #1
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	2b0f      	cmp	r3, #15
 8002638:	f67f ae86 	bls.w	8002348 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	3724      	adds	r7, #36	; 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	40013800 	.word	0x40013800
 8002654:	40020000 	.word	0x40020000
 8002658:	40020400 	.word	0x40020400
 800265c:	40020800 	.word	0x40020800
 8002660:	40020c00 	.word	0x40020c00
 8002664:	40021000 	.word	0x40021000
 8002668:	40021400 	.word	0x40021400
 800266c:	40021800 	.word	0x40021800
 8002670:	40021c00 	.word	0x40021c00
 8002674:	40022000 	.word	0x40022000
 8002678:	40022400 	.word	0x40022400
 800267c:	40013c00 	.word	0x40013c00

08002680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
 800268c:	4613      	mov	r3, r2
 800268e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002690:	787b      	ldrb	r3, [r7, #1]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800269c:	e003      	b.n	80026a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	041a      	lsls	r2, r3, #16
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	619a      	str	r2, [r3, #24]
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e07f      	b.n	80027c6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff fac6 	bl	8001c6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2224      	movs	r2, #36	; 0x24
 80026e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002704:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002714:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d107      	bne.n	800272e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	e006      	b.n	800273c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800273a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d104      	bne.n	800274e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800274c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6859      	ldr	r1, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <HAL_I2C_Init+0x11c>)
 800275a:	430b      	orrs	r3, r1
 800275c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800276c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691a      	ldr	r2, [r3, #16]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69d9      	ldr	r1, [r3, #28]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a1a      	ldr	r2, [r3, #32]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0201 	orr.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	02008000 	.word	0x02008000

080027d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af02      	add	r7, sp, #8
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	4608      	mov	r0, r1
 80027de:	4611      	mov	r1, r2
 80027e0:	461a      	mov	r2, r3
 80027e2:	4603      	mov	r3, r0
 80027e4:	817b      	strh	r3, [r7, #10]
 80027e6:	460b      	mov	r3, r1
 80027e8:	813b      	strh	r3, [r7, #8]
 80027ea:	4613      	mov	r3, r2
 80027ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b20      	cmp	r3, #32
 80027f8:	f040 80f9 	bne.w	80029ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <HAL_I2C_Mem_Write+0x34>
 8002802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002804:	2b00      	cmp	r3, #0
 8002806:	d105      	bne.n	8002814 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800280e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0ed      	b.n	80029f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_I2C_Mem_Write+0x4e>
 800281e:	2302      	movs	r3, #2
 8002820:	e0e6      	b.n	80029f0 <HAL_I2C_Mem_Write+0x21c>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800282a:	f7ff fc67 	bl	80020fc <HAL_GetTick>
 800282e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	2319      	movs	r3, #25
 8002836:	2201      	movs	r2, #1
 8002838:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 fac3 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0d1      	b.n	80029f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2221      	movs	r2, #33	; 0x21
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2240      	movs	r2, #64	; 0x40
 8002858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a3a      	ldr	r2, [r7, #32]
 8002866:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800286c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002874:	88f8      	ldrh	r0, [r7, #6]
 8002876:	893a      	ldrh	r2, [r7, #8]
 8002878:	8979      	ldrh	r1, [r7, #10]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	9301      	str	r3, [sp, #4]
 800287e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	4603      	mov	r3, r0
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f9d3 	bl	8002c30 <I2C_RequestMemoryWrite>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0a9      	b.n	80029f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2bff      	cmp	r3, #255	; 0xff
 80028a4:	d90e      	bls.n	80028c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	22ff      	movs	r2, #255	; 0xff
 80028aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	8979      	ldrh	r1, [r7, #10]
 80028b4:	2300      	movs	r3, #0
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 fc2b 	bl	8003118 <I2C_TransferConfig>
 80028c2:	e00f      	b.n	80028e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	8979      	ldrh	r1, [r7, #10]
 80028d6:	2300      	movs	r3, #0
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 fc1a 	bl	8003118 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 faad 	bl	8002e48 <I2C_WaitOnTXISFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e07b      	b.n	80029f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	781a      	ldrb	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002912:	b29b      	uxth	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d034      	beq.n	800299c <HAL_I2C_Mem_Write+0x1c8>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002936:	2b00      	cmp	r3, #0
 8002938:	d130      	bne.n	800299c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002940:	2200      	movs	r2, #0
 8002942:	2180      	movs	r1, #128	; 0x80
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 fa3f 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e04d      	b.n	80029f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	2bff      	cmp	r3, #255	; 0xff
 800295c:	d90e      	bls.n	800297c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	22ff      	movs	r2, #255	; 0xff
 8002962:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002968:	b2da      	uxtb	r2, r3
 800296a:	8979      	ldrh	r1, [r7, #10]
 800296c:	2300      	movs	r3, #0
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 fbcf 	bl	8003118 <I2C_TransferConfig>
 800297a:	e00f      	b.n	800299c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298a:	b2da      	uxtb	r2, r3
 800298c:	8979      	ldrh	r1, [r7, #10]
 800298e:	2300      	movs	r3, #0
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fbbe 	bl	8003118 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d19e      	bne.n	80028e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 fa8c 	bl	8002ec8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e01a      	b.n	80029f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2220      	movs	r2, #32
 80029c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6859      	ldr	r1, [r3, #4]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <HAL_I2C_Mem_Write+0x224>)
 80029ce:	400b      	ands	r3, r1
 80029d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2220      	movs	r2, #32
 80029d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	e000      	b.n	80029f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80029ee:	2302      	movs	r3, #2
  }
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	fe00e800 	.word	0xfe00e800

080029fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	4608      	mov	r0, r1
 8002a06:	4611      	mov	r1, r2
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	817b      	strh	r3, [r7, #10]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	813b      	strh	r3, [r7, #8]
 8002a12:	4613      	mov	r3, r2
 8002a14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b20      	cmp	r3, #32
 8002a20:	f040 80fd 	bne.w	8002c1e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <HAL_I2C_Mem_Read+0x34>
 8002a2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d105      	bne.n	8002a3c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0f1      	b.n	8002c20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_I2C_Mem_Read+0x4e>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e0ea      	b.n	8002c20 <HAL_I2C_Mem_Read+0x224>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a52:	f7ff fb53 	bl	80020fc <HAL_GetTick>
 8002a56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	2319      	movs	r3, #25
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 f9af 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0d5      	b.n	8002c20 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2222      	movs	r2, #34	; 0x22
 8002a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2240      	movs	r2, #64	; 0x40
 8002a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a3a      	ldr	r2, [r7, #32]
 8002a8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a9c:	88f8      	ldrh	r0, [r7, #6]
 8002a9e:	893a      	ldrh	r2, [r7, #8]
 8002aa0:	8979      	ldrh	r1, [r7, #10]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	9301      	str	r3, [sp, #4]
 8002aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	4603      	mov	r3, r0
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 f913 	bl	8002cd8 <I2C_RequestMemoryRead>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0ad      	b.n	8002c20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2bff      	cmp	r3, #255	; 0xff
 8002acc:	d90e      	bls.n	8002aec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	22ff      	movs	r2, #255	; 0xff
 8002ad2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	8979      	ldrh	r1, [r7, #10]
 8002adc:	4b52      	ldr	r3, [pc, #328]	; (8002c28 <HAL_I2C_Mem_Read+0x22c>)
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 fb17 	bl	8003118 <I2C_TransferConfig>
 8002aea:	e00f      	b.n	8002b0c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	8979      	ldrh	r1, [r7, #10]
 8002afe:	4b4a      	ldr	r3, [pc, #296]	; (8002c28 <HAL_I2C_Mem_Read+0x22c>)
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 fb06 	bl	8003118 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b12:	2200      	movs	r2, #0
 8002b14:	2104      	movs	r1, #4
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f956 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e07c      	b.n	8002c20 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d034      	beq.n	8002bcc <HAL_I2C_Mem_Read+0x1d0>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d130      	bne.n	8002bcc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	2200      	movs	r2, #0
 8002b72:	2180      	movs	r1, #128	; 0x80
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f927 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e04d      	b.n	8002c20 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	2bff      	cmp	r3, #255	; 0xff
 8002b8c:	d90e      	bls.n	8002bac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	22ff      	movs	r2, #255	; 0xff
 8002b92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	8979      	ldrh	r1, [r7, #10]
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 fab7 	bl	8003118 <I2C_TransferConfig>
 8002baa:	e00f      	b.n	8002bcc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	8979      	ldrh	r1, [r7, #10]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 faa6 	bl	8003118 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d19a      	bne.n	8002b0c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f974 	bl	8002ec8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e01a      	b.n	8002c20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6859      	ldr	r1, [r3, #4]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <HAL_I2C_Mem_Read+0x230>)
 8002bfe:	400b      	ands	r3, r1
 8002c00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e000      	b.n	8002c20 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
  }
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	80002400 	.word	0x80002400
 8002c2c:	fe00e800 	.word	0xfe00e800

08002c30 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af02      	add	r7, sp, #8
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	4608      	mov	r0, r1
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4603      	mov	r3, r0
 8002c40:	817b      	strh	r3, [r7, #10]
 8002c42:	460b      	mov	r3, r1
 8002c44:	813b      	strh	r3, [r7, #8]
 8002c46:	4613      	mov	r3, r2
 8002c48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	8979      	ldrh	r1, [r7, #10]
 8002c50:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <I2C_RequestMemoryWrite+0xa4>)
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 fa5d 	bl	8003118 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	69b9      	ldr	r1, [r7, #24]
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f8f0 	bl	8002e48 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e02c      	b.n	8002ccc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d105      	bne.n	8002c84 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c78:	893b      	ldrh	r3, [r7, #8]
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	629a      	str	r2, [r3, #40]	; 0x28
 8002c82:	e015      	b.n	8002cb0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c84:	893b      	ldrh	r3, [r7, #8]
 8002c86:	0a1b      	lsrs	r3, r3, #8
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c92:	69fa      	ldr	r2, [r7, #28]
 8002c94:	69b9      	ldr	r1, [r7, #24]
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f8d6 	bl	8002e48 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e012      	b.n	8002ccc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ca6:	893b      	ldrh	r3, [r7, #8]
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2180      	movs	r1, #128	; 0x80
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 f884 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	80002000 	.word	0x80002000

08002cd8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	4608      	mov	r0, r1
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	817b      	strh	r3, [r7, #10]
 8002cea:	460b      	mov	r3, r1
 8002cec:	813b      	strh	r3, [r7, #8]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	8979      	ldrh	r1, [r7, #10]
 8002cf8:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <I2C_RequestMemoryRead+0xa4>)
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 fa0a 	bl	8003118 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d04:	69fa      	ldr	r2, [r7, #28]
 8002d06:	69b9      	ldr	r1, [r7, #24]
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f89d 	bl	8002e48 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e02c      	b.n	8002d72 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d18:	88fb      	ldrh	r3, [r7, #6]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d105      	bne.n	8002d2a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d1e:	893b      	ldrh	r3, [r7, #8]
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	629a      	str	r2, [r3, #40]	; 0x28
 8002d28:	e015      	b.n	8002d56 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d2a:	893b      	ldrh	r3, [r7, #8]
 8002d2c:	0a1b      	lsrs	r3, r3, #8
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d38:	69fa      	ldr	r2, [r7, #28]
 8002d3a:	69b9      	ldr	r1, [r7, #24]
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f883 	bl	8002e48 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e012      	b.n	8002d72 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d4c:	893b      	ldrh	r3, [r7, #8]
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2140      	movs	r1, #64	; 0x40
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 f831 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	80002000 	.word	0x80002000

08002d80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d103      	bne.n	8002d9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d007      	beq.n	8002dbc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	619a      	str	r2, [r3, #24]
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dd8:	e022      	b.n	8002e20 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de0:	d01e      	beq.n	8002e20 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de2:	f7ff f98b 	bl	80020fc <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d302      	bcc.n	8002df8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d113      	bne.n	8002e20 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfc:	f043 0220 	orr.w	r2, r3, #32
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e00f      	b.n	8002e40 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	bf0c      	ite	eq
 8002e30:	2301      	moveq	r3, #1
 8002e32:	2300      	movne	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d0cd      	beq.n	8002dda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e54:	e02c      	b.n	8002eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f870 	bl	8002f40 <I2C_IsErrorOccurred>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e02a      	b.n	8002ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e70:	d01e      	beq.n	8002eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e72:	f7ff f943 	bl	80020fc <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d302      	bcc.n	8002e88 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d113      	bne.n	8002eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8c:	f043 0220 	orr.w	r2, r3, #32
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e007      	b.n	8002ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d1cb      	bne.n	8002e56 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ed4:	e028      	b.n	8002f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f830 	bl	8002f40 <I2C_IsErrorOccurred>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e026      	b.n	8002f38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eea:	f7ff f907 	bl	80020fc <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d302      	bcc.n	8002f00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d113      	bne.n	8002f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f04:	f043 0220 	orr.w	r2, r3, #32
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e007      	b.n	8002f38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d1cf      	bne.n	8002ed6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	; 0x28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d075      	beq.n	8003058 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2210      	movs	r2, #16
 8002f72:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f74:	e056      	b.n	8003024 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d052      	beq.n	8003024 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f7e:	f7ff f8bd 	bl	80020fc <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d302      	bcc.n	8002f94 <I2C_IsErrorOccurred+0x54>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d147      	bne.n	8003024 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fa6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb6:	d12e      	bne.n	8003016 <I2C_IsErrorOccurred+0xd6>
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fbe:	d02a      	beq.n	8003016 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002fc0:	7cfb      	ldrb	r3, [r7, #19]
 8002fc2:	2b20      	cmp	r3, #32
 8002fc4:	d027      	beq.n	8003016 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fd4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002fd6:	f7ff f891 	bl	80020fc <HAL_GetTick>
 8002fda:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fdc:	e01b      	b.n	8003016 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002fde:	f7ff f88d 	bl	80020fc <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b19      	cmp	r3, #25
 8002fea:	d914      	bls.n	8003016 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff0:	f043 0220 	orr.w	r2, r3, #32
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	f003 0320 	and.w	r3, r3, #32
 8003020:	2b20      	cmp	r3, #32
 8003022:	d1dc      	bne.n	8002fde <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	f003 0320 	and.w	r3, r3, #32
 800302e:	2b20      	cmp	r3, #32
 8003030:	d003      	beq.n	800303a <I2C_IsErrorOccurred+0xfa>
 8003032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003036:	2b00      	cmp	r3, #0
 8003038:	d09d      	beq.n	8002f76 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800303a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800303e:	2b00      	cmp	r3, #0
 8003040:	d103      	bne.n	800304a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2220      	movs	r2, #32
 8003048:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	f043 0304 	orr.w	r3, r3, #4
 8003050:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00b      	beq.n	8003082 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f44f 7280 	mov.w	r2, #256	; 0x100
 800307a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00b      	beq.n	80030a4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	f043 0308 	orr.w	r3, r3, #8
 8003092:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800309c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00b      	beq.n	80030c6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	f043 0302 	orr.w	r3, r3, #2
 80030b4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80030c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d01c      	beq.n	8003108 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f7ff fe56 	bl	8002d80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6859      	ldr	r1, [r3, #4]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <I2C_IsErrorOccurred+0x1d4>)
 80030e0:	400b      	ands	r3, r1
 80030e2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800310c:	4618      	mov	r0, r3
 800310e:	3728      	adds	r7, #40	; 0x28
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	fe00e800 	.word	0xfe00e800

08003118 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	607b      	str	r3, [r7, #4]
 8003122:	460b      	mov	r3, r1
 8003124:	817b      	strh	r3, [r7, #10]
 8003126:	4613      	mov	r3, r2
 8003128:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800312a:	897b      	ldrh	r3, [r7, #10]
 800312c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003130:	7a7b      	ldrb	r3, [r7, #9]
 8003132:	041b      	lsls	r3, r3, #16
 8003134:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003138:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	4313      	orrs	r3, r2
 8003142:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003146:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	0d5b      	lsrs	r3, r3, #21
 8003152:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003156:	4b08      	ldr	r3, [pc, #32]	; (8003178 <I2C_TransferConfig+0x60>)
 8003158:	430b      	orrs	r3, r1
 800315a:	43db      	mvns	r3, r3
 800315c:	ea02 0103 	and.w	r1, r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800316a:	bf00      	nop
 800316c:	371c      	adds	r7, #28
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	03ff63ff 	.word	0x03ff63ff

0800317c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b20      	cmp	r3, #32
 8003190:	d138      	bne.n	8003204 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800319c:	2302      	movs	r3, #2
 800319e:	e032      	b.n	8003206 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2224      	movs	r2, #36	; 0x24
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0201 	bic.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6819      	ldr	r1, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	e000      	b.n	8003206 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003204:	2302      	movs	r3, #2
  }
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003212:	b480      	push	{r7}
 8003214:	b085      	sub	sp, #20
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b20      	cmp	r3, #32
 8003226:	d139      	bne.n	800329c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003232:	2302      	movs	r3, #2
 8003234:	e033      	b.n	800329e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2224      	movs	r2, #36	; 0x24
 8003242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0201 	bic.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003264:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	e000      	b.n	800329e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800329c:	2302      	movs	r3, #2
  }
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ac:	b08f      	sub	sp, #60	; 0x3c
 80032ae:	af0a      	add	r7, sp, #40	; 0x28
 80032b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e116      	b.n	80034ea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fe fde0 	bl	8001e9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2203      	movs	r2, #3
 80032e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d102      	bne.n	80032f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f002 fc7e 	bl	8005bfc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	603b      	str	r3, [r7, #0]
 8003306:	687e      	ldr	r6, [r7, #4]
 8003308:	466d      	mov	r5, sp
 800330a:	f106 0410 	add.w	r4, r6, #16
 800330e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003310:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003312:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003314:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003316:	e894 0003 	ldmia.w	r4, {r0, r1}
 800331a:	e885 0003 	stmia.w	r5, {r0, r1}
 800331e:	1d33      	adds	r3, r6, #4
 8003320:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003322:	6838      	ldr	r0, [r7, #0]
 8003324:	f002 fc12 	bl	8005b4c <USB_CoreInit>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d005      	beq.n	800333a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2202      	movs	r2, #2
 8003332:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e0d7      	b.n	80034ea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2100      	movs	r1, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f002 fc6c 	bl	8005c1e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003346:	2300      	movs	r3, #0
 8003348:	73fb      	strb	r3, [r7, #15]
 800334a:	e04a      	b.n	80033e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800334c:	7bfa      	ldrb	r2, [r7, #15]
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	333d      	adds	r3, #61	; 0x3d
 800335c:	2201      	movs	r2, #1
 800335e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003360:	7bfa      	ldrb	r2, [r7, #15]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	333c      	adds	r3, #60	; 0x3c
 8003370:	7bfa      	ldrb	r2, [r7, #15]
 8003372:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003374:	7bfa      	ldrb	r2, [r7, #15]
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	b298      	uxth	r0, r3
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	3342      	adds	r3, #66	; 0x42
 8003388:	4602      	mov	r2, r0
 800338a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800338c:	7bfa      	ldrb	r2, [r7, #15]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	333f      	adds	r3, #63	; 0x3f
 800339c:	2200      	movs	r2, #0
 800339e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033a0:	7bfa      	ldrb	r2, [r7, #15]
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	3344      	adds	r3, #68	; 0x44
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033b4:	7bfa      	ldrb	r2, [r7, #15]
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	3348      	adds	r3, #72	; 0x48
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033c8:	7bfa      	ldrb	r2, [r7, #15]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	3350      	adds	r3, #80	; 0x50
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	3301      	adds	r3, #1
 80033e0:	73fb      	strb	r3, [r7, #15]
 80033e2:	7bfa      	ldrb	r2, [r7, #15]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d3af      	bcc.n	800334c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ec:	2300      	movs	r3, #0
 80033ee:	73fb      	strb	r3, [r7, #15]
 80033f0:	e044      	b.n	800347c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033f2:	7bfa      	ldrb	r2, [r7, #15]
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003404:	2200      	movs	r2, #0
 8003406:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003408:	7bfa      	ldrb	r2, [r7, #15]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	1a9b      	subs	r3, r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800341a:	7bfa      	ldrb	r2, [r7, #15]
 800341c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800341e:	7bfa      	ldrb	r2, [r7, #15]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003430:	2200      	movs	r2, #0
 8003432:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003434:	7bfa      	ldrb	r2, [r7, #15]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800344a:	7bfa      	ldrb	r2, [r7, #15]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003460:	7bfa      	ldrb	r2, [r7, #15]
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	3301      	adds	r3, #1
 800347a:	73fb      	strb	r3, [r7, #15]
 800347c:	7bfa      	ldrb	r2, [r7, #15]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	429a      	cmp	r2, r3
 8003484:	d3b5      	bcc.n	80033f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	687e      	ldr	r6, [r7, #4]
 800348e:	466d      	mov	r5, sp
 8003490:	f106 0410 	add.w	r4, r6, #16
 8003494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800349a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800349c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80034a4:	1d33      	adds	r3, r6, #4
 80034a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034a8:	6838      	ldr	r0, [r7, #0]
 80034aa:	f002 fc05 	bl	8005cb8 <USB_DevInit>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e014      	b.n	80034ea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d102      	bne.n	80034de <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f80b 	bl	80034f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f002 fdbf 	bl	8006066 <USB_DevDisconnect>

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080034f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003522:	4b05      	ldr	r3, [pc, #20]	; (8003538 <HAL_PCDEx_ActivateLPM+0x44>)
 8003524:	4313      	orrs	r3, r2
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	10000003 	.word	0x10000003

0800353c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003540:	4b05      	ldr	r3, [pc, #20]	; (8003558 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a04      	ldr	r2, [pc, #16]	; (8003558 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354a:	6013      	str	r3, [r2, #0]
}
 800354c:	bf00      	nop
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40007000 	.word	0x40007000

0800355c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003564:	2300      	movs	r3, #0
 8003566:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e291      	b.n	8003a96 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 8087 	beq.w	800368e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003580:	4b96      	ldr	r3, [pc, #600]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 030c 	and.w	r3, r3, #12
 8003588:	2b04      	cmp	r3, #4
 800358a:	d00c      	beq.n	80035a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800358c:	4b93      	ldr	r3, [pc, #588]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 030c 	and.w	r3, r3, #12
 8003594:	2b08      	cmp	r3, #8
 8003596:	d112      	bne.n	80035be <HAL_RCC_OscConfig+0x62>
 8003598:	4b90      	ldr	r3, [pc, #576]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035a4:	d10b      	bne.n	80035be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a6:	4b8d      	ldr	r3, [pc, #564]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d06c      	beq.n	800368c <HAL_RCC_OscConfig+0x130>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d168      	bne.n	800368c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e26b      	b.n	8003a96 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c6:	d106      	bne.n	80035d6 <HAL_RCC_OscConfig+0x7a>
 80035c8:	4b84      	ldr	r3, [pc, #528]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a83      	ldr	r2, [pc, #524]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 80035ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	e02e      	b.n	8003634 <HAL_RCC_OscConfig+0xd8>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x9c>
 80035de:	4b7f      	ldr	r3, [pc, #508]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a7e      	ldr	r2, [pc, #504]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 80035e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4b7c      	ldr	r3, [pc, #496]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a7b      	ldr	r2, [pc, #492]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 80035f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	e01d      	b.n	8003634 <HAL_RCC_OscConfig+0xd8>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003600:	d10c      	bne.n	800361c <HAL_RCC_OscConfig+0xc0>
 8003602:	4b76      	ldr	r3, [pc, #472]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a75      	ldr	r2, [pc, #468]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 8003608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b73      	ldr	r3, [pc, #460]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a72      	ldr	r2, [pc, #456]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 8003614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e00b      	b.n	8003634 <HAL_RCC_OscConfig+0xd8>
 800361c:	4b6f      	ldr	r3, [pc, #444]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a6e      	ldr	r2, [pc, #440]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 8003622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	4b6c      	ldr	r3, [pc, #432]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a6b      	ldr	r2, [pc, #428]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 800362e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d013      	beq.n	8003664 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fe fd5e 	bl	80020fc <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003644:	f7fe fd5a 	bl	80020fc <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	; 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e21f      	b.n	8003a96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	4b61      	ldr	r3, [pc, #388]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0xe8>
 8003662:	e014      	b.n	800368e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7fe fd4a 	bl	80020fc <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800366c:	f7fe fd46 	bl	80020fc <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b64      	cmp	r3, #100	; 0x64
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e20b      	b.n	8003a96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367e:	4b57      	ldr	r3, [pc, #348]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x110>
 800368a:	e000      	b.n	800368e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d069      	beq.n	800376e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800369a:	4b50      	ldr	r3, [pc, #320]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036a6:	4b4d      	ldr	r3, [pc, #308]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d11c      	bne.n	80036ec <HAL_RCC_OscConfig+0x190>
 80036b2:	4b4a      	ldr	r3, [pc, #296]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d116      	bne.n	80036ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036be:	4b47      	ldr	r3, [pc, #284]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_RCC_OscConfig+0x17a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d001      	beq.n	80036d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e1df      	b.n	8003a96 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d6:	4b41      	ldr	r3, [pc, #260]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	493d      	ldr	r1, [pc, #244]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ea:	e040      	b.n	800376e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d023      	beq.n	800373c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f4:	4b39      	ldr	r3, [pc, #228]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a38      	ldr	r2, [pc, #224]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fe fcfc 	bl	80020fc <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003708:	f7fe fcf8 	bl	80020fc <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e1bd      	b.n	8003a96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371a:	4b30      	ldr	r3, [pc, #192]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003726:	4b2d      	ldr	r3, [pc, #180]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4929      	ldr	r1, [pc, #164]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 8003736:	4313      	orrs	r3, r2
 8003738:	600b      	str	r3, [r1, #0]
 800373a:	e018      	b.n	800376e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800373c:	4b27      	ldr	r3, [pc, #156]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a26      	ldr	r2, [pc, #152]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 8003742:	f023 0301 	bic.w	r3, r3, #1
 8003746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003748:	f7fe fcd8 	bl	80020fc <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003750:	f7fe fcd4 	bl	80020fc <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e199      	b.n	8003a96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003762:	4b1e      	ldr	r3, [pc, #120]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f0      	bne.n	8003750 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b00      	cmp	r3, #0
 8003778:	d038      	beq.n	80037ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d019      	beq.n	80037b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003782:	4b16      	ldr	r3, [pc, #88]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 8003784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003786:	4a15      	ldr	r2, [pc, #84]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 8003788:	f043 0301 	orr.w	r3, r3, #1
 800378c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378e:	f7fe fcb5 	bl	80020fc <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003796:	f7fe fcb1 	bl	80020fc <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e176      	b.n	8003a96 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037a8:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 80037aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0f0      	beq.n	8003796 <HAL_RCC_OscConfig+0x23a>
 80037b4:	e01a      	b.n	80037ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037b6:	4b09      	ldr	r3, [pc, #36]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 80037b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ba:	4a08      	ldr	r2, [pc, #32]	; (80037dc <HAL_RCC_OscConfig+0x280>)
 80037bc:	f023 0301 	bic.w	r3, r3, #1
 80037c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c2:	f7fe fc9b 	bl	80020fc <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c8:	e00a      	b.n	80037e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ca:	f7fe fc97 	bl	80020fc <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d903      	bls.n	80037e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e15c      	b.n	8003a96 <HAL_RCC_OscConfig+0x53a>
 80037dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e0:	4b91      	ldr	r3, [pc, #580]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 80037e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1ee      	bne.n	80037ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 80a4 	beq.w	8003942 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037fa:	4b8b      	ldr	r3, [pc, #556]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10d      	bne.n	8003822 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003806:	4b88      	ldr	r3, [pc, #544]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	4a87      	ldr	r2, [pc, #540]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 800380c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003810:	6413      	str	r3, [r2, #64]	; 0x40
 8003812:	4b85      	ldr	r3, [pc, #532]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381a:	60bb      	str	r3, [r7, #8]
 800381c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381e:	2301      	movs	r3, #1
 8003820:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003822:	4b82      	ldr	r3, [pc, #520]	; (8003a2c <HAL_RCC_OscConfig+0x4d0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382a:	2b00      	cmp	r3, #0
 800382c:	d118      	bne.n	8003860 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800382e:	4b7f      	ldr	r3, [pc, #508]	; (8003a2c <HAL_RCC_OscConfig+0x4d0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a7e      	ldr	r2, [pc, #504]	; (8003a2c <HAL_RCC_OscConfig+0x4d0>)
 8003834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800383a:	f7fe fc5f 	bl	80020fc <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003842:	f7fe fc5b 	bl	80020fc <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b64      	cmp	r3, #100	; 0x64
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e120      	b.n	8003a96 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003854:	4b75      	ldr	r3, [pc, #468]	; (8003a2c <HAL_RCC_OscConfig+0x4d0>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f0      	beq.n	8003842 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d106      	bne.n	8003876 <HAL_RCC_OscConfig+0x31a>
 8003868:	4b6f      	ldr	r3, [pc, #444]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 800386a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386c:	4a6e      	ldr	r2, [pc, #440]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	6713      	str	r3, [r2, #112]	; 0x70
 8003874:	e02d      	b.n	80038d2 <HAL_RCC_OscConfig+0x376>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10c      	bne.n	8003898 <HAL_RCC_OscConfig+0x33c>
 800387e:	4b6a      	ldr	r3, [pc, #424]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003882:	4a69      	ldr	r2, [pc, #420]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 8003884:	f023 0301 	bic.w	r3, r3, #1
 8003888:	6713      	str	r3, [r2, #112]	; 0x70
 800388a:	4b67      	ldr	r3, [pc, #412]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388e:	4a66      	ldr	r2, [pc, #408]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 8003890:	f023 0304 	bic.w	r3, r3, #4
 8003894:	6713      	str	r3, [r2, #112]	; 0x70
 8003896:	e01c      	b.n	80038d2 <HAL_RCC_OscConfig+0x376>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b05      	cmp	r3, #5
 800389e:	d10c      	bne.n	80038ba <HAL_RCC_OscConfig+0x35e>
 80038a0:	4b61      	ldr	r3, [pc, #388]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 80038a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a4:	4a60      	ldr	r2, [pc, #384]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 80038a6:	f043 0304 	orr.w	r3, r3, #4
 80038aa:	6713      	str	r3, [r2, #112]	; 0x70
 80038ac:	4b5e      	ldr	r3, [pc, #376]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b0:	4a5d      	ldr	r2, [pc, #372]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	6713      	str	r3, [r2, #112]	; 0x70
 80038b8:	e00b      	b.n	80038d2 <HAL_RCC_OscConfig+0x376>
 80038ba:	4b5b      	ldr	r3, [pc, #364]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 80038bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038be:	4a5a      	ldr	r2, [pc, #360]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 80038c0:	f023 0301 	bic.w	r3, r3, #1
 80038c4:	6713      	str	r3, [r2, #112]	; 0x70
 80038c6:	4b58      	ldr	r3, [pc, #352]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 80038c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ca:	4a57      	ldr	r2, [pc, #348]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 80038cc:	f023 0304 	bic.w	r3, r3, #4
 80038d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d015      	beq.n	8003906 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038da:	f7fe fc0f 	bl	80020fc <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e0:	e00a      	b.n	80038f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e2:	f7fe fc0b 	bl	80020fc <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e0ce      	b.n	8003a96 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f8:	4b4b      	ldr	r3, [pc, #300]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 80038fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0ee      	beq.n	80038e2 <HAL_RCC_OscConfig+0x386>
 8003904:	e014      	b.n	8003930 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003906:	f7fe fbf9 	bl	80020fc <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800390c:	e00a      	b.n	8003924 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390e:	f7fe fbf5 	bl	80020fc <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	f241 3288 	movw	r2, #5000	; 0x1388
 800391c:	4293      	cmp	r3, r2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e0b8      	b.n	8003a96 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003924:	4b40      	ldr	r3, [pc, #256]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 8003926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1ee      	bne.n	800390e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003930:	7dfb      	ldrb	r3, [r7, #23]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d105      	bne.n	8003942 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003936:	4b3c      	ldr	r3, [pc, #240]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	4a3b      	ldr	r2, [pc, #236]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 800393c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003940:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 80a4 	beq.w	8003a94 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800394c:	4b36      	ldr	r3, [pc, #216]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 030c 	and.w	r3, r3, #12
 8003954:	2b08      	cmp	r3, #8
 8003956:	d06b      	beq.n	8003a30 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d149      	bne.n	80039f4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003960:	4b31      	ldr	r3, [pc, #196]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a30      	ldr	r2, [pc, #192]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 8003966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800396a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396c:	f7fe fbc6 	bl	80020fc <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003974:	f7fe fbc2 	bl	80020fc <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e087      	b.n	8003a96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003986:	4b28      	ldr	r3, [pc, #160]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69da      	ldr	r2, [r3, #28]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	019b      	lsls	r3, r3, #6
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a8:	085b      	lsrs	r3, r3, #1
 80039aa:	3b01      	subs	r3, #1
 80039ac:	041b      	lsls	r3, r3, #16
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	061b      	lsls	r3, r3, #24
 80039b6:	4313      	orrs	r3, r2
 80039b8:	4a1b      	ldr	r2, [pc, #108]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 80039ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039be:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039c0:	4b19      	ldr	r3, [pc, #100]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a18      	ldr	r2, [pc, #96]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 80039c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039cc:	f7fe fb96 	bl	80020fc <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d4:	f7fe fb92 	bl	80020fc <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e057      	b.n	8003a96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e6:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f0      	beq.n	80039d4 <HAL_RCC_OscConfig+0x478>
 80039f2:	e04f      	b.n	8003a94 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f4:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a0b      	ldr	r2, [pc, #44]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 80039fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a00:	f7fe fb7c 	bl	80020fc <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a08:	f7fe fb78 	bl	80020fc <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e03d      	b.n	8003a96 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1a:	4b03      	ldr	r3, [pc, #12]	; (8003a28 <HAL_RCC_OscConfig+0x4cc>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x4ac>
 8003a26:	e035      	b.n	8003a94 <HAL_RCC_OscConfig+0x538>
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a30:	4b1b      	ldr	r3, [pc, #108]	; (8003aa0 <HAL_RCC_OscConfig+0x544>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d028      	beq.n	8003a90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d121      	bne.n	8003a90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d11a      	bne.n	8003a90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a60:	4013      	ands	r3, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a66:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d111      	bne.n	8003a90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	085b      	lsrs	r3, r3, #1
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d107      	bne.n	8003a90 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e000      	b.n	8003a96 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40023800 	.word	0x40023800

08003aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0d0      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003abc:	4b6a      	ldr	r3, [pc, #424]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d910      	bls.n	8003aec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aca:	4b67      	ldr	r3, [pc, #412]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f023 020f 	bic.w	r2, r3, #15
 8003ad2:	4965      	ldr	r1, [pc, #404]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ada:	4b63      	ldr	r3, [pc, #396]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d001      	beq.n	8003aec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0b8      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d020      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b04:	4b59      	ldr	r3, [pc, #356]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	4a58      	ldr	r2, [pc, #352]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b1c:	4b53      	ldr	r3, [pc, #332]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	4a52      	ldr	r2, [pc, #328]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b28:	4b50      	ldr	r3, [pc, #320]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	494d      	ldr	r1, [pc, #308]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d040      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d107      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4e:	4b47      	ldr	r3, [pc, #284]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d115      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e07f      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d107      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b66:	4b41      	ldr	r3, [pc, #260]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d109      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e073      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b76:	4b3d      	ldr	r3, [pc, #244]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e06b      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b86:	4b39      	ldr	r3, [pc, #228]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f023 0203 	bic.w	r2, r3, #3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	4936      	ldr	r1, [pc, #216]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b98:	f7fe fab0 	bl	80020fc <HAL_GetTick>
 8003b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba0:	f7fe faac 	bl	80020fc <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e053      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	4b2d      	ldr	r3, [pc, #180]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 020c 	and.w	r2, r3, #12
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d1eb      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc8:	4b27      	ldr	r3, [pc, #156]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d210      	bcs.n	8003bf8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd6:	4b24      	ldr	r3, [pc, #144]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 020f 	bic.w	r2, r3, #15
 8003bde:	4922      	ldr	r1, [pc, #136]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be6:	4b20      	ldr	r3, [pc, #128]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e032      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d008      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c04:	4b19      	ldr	r3, [pc, #100]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	4916      	ldr	r1, [pc, #88]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d009      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c22:	4b12      	ldr	r3, [pc, #72]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	490e      	ldr	r1, [pc, #56]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c36:	f000 f821 	bl	8003c7c <HAL_RCC_GetSysClockFreq>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	091b      	lsrs	r3, r3, #4
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	490a      	ldr	r1, [pc, #40]	; (8003c70 <HAL_RCC_ClockConfig+0x1cc>)
 8003c48:	5ccb      	ldrb	r3, [r1, r3]
 8003c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4e:	4a09      	ldr	r2, [pc, #36]	; (8003c74 <HAL_RCC_ClockConfig+0x1d0>)
 8003c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c52:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <HAL_RCC_ClockConfig+0x1d4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fe fa0c 	bl	8002074 <HAL_InitTick>

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40023c00 	.word	0x40023c00
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	08006198 	.word	0x08006198
 8003c74:	2000001c 	.word	0x2000001c
 8003c78:	20000020 	.word	0x20000020

08003c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c84:	2300      	movs	r3, #0
 8003c86:	607b      	str	r3, [r7, #4]
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003c90:	2300      	movs	r3, #0
 8003c92:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c94:	4b67      	ldr	r3, [pc, #412]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 030c 	and.w	r3, r3, #12
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d00d      	beq.n	8003cbc <HAL_RCC_GetSysClockFreq+0x40>
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	f200 80bd 	bhi.w	8003e20 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x34>
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d003      	beq.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cae:	e0b7      	b.n	8003e20 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cb0:	4b61      	ldr	r3, [pc, #388]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003cb2:	60bb      	str	r3, [r7, #8]
      break;
 8003cb4:	e0b7      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cb6:	4b61      	ldr	r3, [pc, #388]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003cb8:	60bb      	str	r3, [r7, #8]
      break;
 8003cba:	e0b4      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cbc:	4b5d      	ldr	r3, [pc, #372]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cc4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003cc6:	4b5b      	ldr	r3, [pc, #364]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d04d      	beq.n	8003d6e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cd2:	4b58      	ldr	r3, [pc, #352]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	099b      	lsrs	r3, r3, #6
 8003cd8:	461a      	mov	r2, r3
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ce2:	f04f 0100 	mov.w	r1, #0
 8003ce6:	ea02 0800 	and.w	r8, r2, r0
 8003cea:	ea03 0901 	and.w	r9, r3, r1
 8003cee:	4640      	mov	r0, r8
 8003cf0:	4649      	mov	r1, r9
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	f04f 0300 	mov.w	r3, #0
 8003cfa:	014b      	lsls	r3, r1, #5
 8003cfc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d00:	0142      	lsls	r2, r0, #5
 8003d02:	4610      	mov	r0, r2
 8003d04:	4619      	mov	r1, r3
 8003d06:	ebb0 0008 	subs.w	r0, r0, r8
 8003d0a:	eb61 0109 	sbc.w	r1, r1, r9
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	018b      	lsls	r3, r1, #6
 8003d18:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d1c:	0182      	lsls	r2, r0, #6
 8003d1e:	1a12      	subs	r2, r2, r0
 8003d20:	eb63 0301 	sbc.w	r3, r3, r1
 8003d24:	f04f 0000 	mov.w	r0, #0
 8003d28:	f04f 0100 	mov.w	r1, #0
 8003d2c:	00d9      	lsls	r1, r3, #3
 8003d2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d32:	00d0      	lsls	r0, r2, #3
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	eb12 0208 	adds.w	r2, r2, r8
 8003d3c:	eb43 0309 	adc.w	r3, r3, r9
 8003d40:	f04f 0000 	mov.w	r0, #0
 8003d44:	f04f 0100 	mov.w	r1, #0
 8003d48:	0259      	lsls	r1, r3, #9
 8003d4a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003d4e:	0250      	lsls	r0, r2, #9
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4610      	mov	r0, r2
 8003d56:	4619      	mov	r1, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	f7fc fec0 	bl	8000ae4 <__aeabi_uldivmod>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4613      	mov	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	e04a      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d6e:	4b31      	ldr	r3, [pc, #196]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	099b      	lsrs	r3, r3, #6
 8003d74:	461a      	mov	r2, r3
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d7e:	f04f 0100 	mov.w	r1, #0
 8003d82:	ea02 0400 	and.w	r4, r2, r0
 8003d86:	ea03 0501 	and.w	r5, r3, r1
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	4629      	mov	r1, r5
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	014b      	lsls	r3, r1, #5
 8003d98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d9c:	0142      	lsls	r2, r0, #5
 8003d9e:	4610      	mov	r0, r2
 8003da0:	4619      	mov	r1, r3
 8003da2:	1b00      	subs	r0, r0, r4
 8003da4:	eb61 0105 	sbc.w	r1, r1, r5
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	018b      	lsls	r3, r1, #6
 8003db2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003db6:	0182      	lsls	r2, r0, #6
 8003db8:	1a12      	subs	r2, r2, r0
 8003dba:	eb63 0301 	sbc.w	r3, r3, r1
 8003dbe:	f04f 0000 	mov.w	r0, #0
 8003dc2:	f04f 0100 	mov.w	r1, #0
 8003dc6:	00d9      	lsls	r1, r3, #3
 8003dc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dcc:	00d0      	lsls	r0, r2, #3
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	1912      	adds	r2, r2, r4
 8003dd4:	eb45 0303 	adc.w	r3, r5, r3
 8003dd8:	f04f 0000 	mov.w	r0, #0
 8003ddc:	f04f 0100 	mov.w	r1, #0
 8003de0:	0299      	lsls	r1, r3, #10
 8003de2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003de6:	0290      	lsls	r0, r2, #10
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4610      	mov	r0, r2
 8003dee:	4619      	mov	r1, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	461a      	mov	r2, r3
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	f7fc fe74 	bl	8000ae4 <__aeabi_uldivmod>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4613      	mov	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e04:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	0c1b      	lsrs	r3, r3, #16
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	3301      	adds	r3, #1
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1c:	60bb      	str	r3, [r7, #8]
      break;
 8003e1e:	e002      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e22:	60bb      	str	r3, [r7, #8]
      break;
 8003e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e26:	68bb      	ldr	r3, [r7, #8]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e32:	bf00      	nop
 8003e34:	40023800 	.word	0x40023800
 8003e38:	00f42400 	.word	0x00f42400
 8003e3c:	007a1200 	.word	0x007a1200

08003e40 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e44:	4b03      	ldr	r3, [pc, #12]	; (8003e54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e46:	681b      	ldr	r3, [r3, #0]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	2000001c 	.word	0x2000001c

08003e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e5c:	f7ff fff0 	bl	8003e40 <HAL_RCC_GetHCLKFreq>
 8003e60:	4602      	mov	r2, r0
 8003e62:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	0a9b      	lsrs	r3, r3, #10
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	4903      	ldr	r1, [pc, #12]	; (8003e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e6e:	5ccb      	ldrb	r3, [r1, r3]
 8003e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	080061a8 	.word	0x080061a8

08003e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e84:	f7ff ffdc 	bl	8003e40 <HAL_RCC_GetHCLKFreq>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	0b5b      	lsrs	r3, r3, #13
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	4903      	ldr	r1, [pc, #12]	; (8003ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e96:	5ccb      	ldrb	r3, [r1, r3]
 8003e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	080061a8 	.word	0x080061a8

08003ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d012      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ed0:	4b69      	ldr	r3, [pc, #420]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	4a68      	ldr	r2, [pc, #416]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003eda:	6093      	str	r3, [r2, #8]
 8003edc:	4b66      	ldr	r3, [pc, #408]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee4:	4964      	ldr	r1, [pc, #400]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d017      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f02:	4b5d      	ldr	r3, [pc, #372]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f10:	4959      	ldr	r1, [pc, #356]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f20:	d101      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f22:	2301      	movs	r3, #1
 8003f24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d017      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f3e:	4b4e      	ldr	r3, [pc, #312]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	494a      	ldr	r1, [pc, #296]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 808b 	beq.w	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f8c:	4b3a      	ldr	r3, [pc, #232]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	4a39      	ldr	r2, [pc, #228]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f96:	6413      	str	r3, [r2, #64]	; 0x40
 8003f98:	4b37      	ldr	r3, [pc, #220]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fa4:	4b35      	ldr	r3, [pc, #212]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a34      	ldr	r2, [pc, #208]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb0:	f7fe f8a4 	bl	80020fc <HAL_GetTick>
 8003fb4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb8:	f7fe f8a0 	bl	80020fc <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b64      	cmp	r3, #100	; 0x64
 8003fc4:	d901      	bls.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e357      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fca:	4b2c      	ldr	r3, [pc, #176]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0f0      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fd6:	4b28      	ldr	r3, [pc, #160]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fde:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d035      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d02e      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ff4:	4b20      	ldr	r3, [pc, #128]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ffc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ffe:	4b1e      	ldr	r3, [pc, #120]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004002:	4a1d      	ldr	r2, [pc, #116]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004008:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800400a:	4b1b      	ldr	r3, [pc, #108]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400e:	4a1a      	ldr	r2, [pc, #104]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004014:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004016:	4a18      	ldr	r2, [pc, #96]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800401c:	4b16      	ldr	r3, [pc, #88]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b01      	cmp	r3, #1
 8004026:	d114      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fe f868 	bl	80020fc <HAL_GetTick>
 800402c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800402e:	e00a      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004030:	f7fe f864 	bl	80020fc <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	f241 3288 	movw	r2, #5000	; 0x1388
 800403e:	4293      	cmp	r3, r2
 8004040:	d901      	bls.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e319      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004046:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0ee      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800405e:	d111      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004060:	4b05      	ldr	r3, [pc, #20]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800406c:	4b04      	ldr	r3, [pc, #16]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800406e:	400b      	ands	r3, r1
 8004070:	4901      	ldr	r1, [pc, #4]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004072:	4313      	orrs	r3, r2
 8004074:	608b      	str	r3, [r1, #8]
 8004076:	e00b      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004078:	40023800 	.word	0x40023800
 800407c:	40007000 	.word	0x40007000
 8004080:	0ffffcff 	.word	0x0ffffcff
 8004084:	4bb1      	ldr	r3, [pc, #708]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	4ab0      	ldr	r2, [pc, #704]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800408a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800408e:	6093      	str	r3, [r2, #8]
 8004090:	4bae      	ldr	r3, [pc, #696]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004092:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800409c:	49ab      	ldr	r1, [pc, #684]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0310 	and.w	r3, r3, #16
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d010      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040ae:	4ba7      	ldr	r3, [pc, #668]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040b4:	4aa5      	ldr	r2, [pc, #660]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80040be:	4ba3      	ldr	r3, [pc, #652]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	49a0      	ldr	r1, [pc, #640]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040dc:	4b9b      	ldr	r3, [pc, #620]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ea:	4998      	ldr	r1, [pc, #608]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040fe:	4b93      	ldr	r3, [pc, #588]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004104:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800410c:	498f      	ldr	r1, [pc, #572]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004120:	4b8a      	ldr	r3, [pc, #552]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004126:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800412e:	4987      	ldr	r1, [pc, #540]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004142:	4b82      	ldr	r3, [pc, #520]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004148:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004150:	497e      	ldr	r1, [pc, #504]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004164:	4b79      	ldr	r3, [pc, #484]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416a:	f023 0203 	bic.w	r2, r3, #3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	4976      	ldr	r1, [pc, #472]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004186:	4b71      	ldr	r3, [pc, #452]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418c:	f023 020c 	bic.w	r2, r3, #12
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004194:	496d      	ldr	r1, [pc, #436]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041a8:	4b68      	ldr	r3, [pc, #416]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b6:	4965      	ldr	r1, [pc, #404]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041ca:	4b60      	ldr	r3, [pc, #384]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d8:	495c      	ldr	r1, [pc, #368]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041ec:	4b57      	ldr	r3, [pc, #348]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fa:	4954      	ldr	r1, [pc, #336]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800420e:	4b4f      	ldr	r3, [pc, #316]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004214:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421c:	494b      	ldr	r1, [pc, #300]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004230:	4b46      	ldr	r3, [pc, #280]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004236:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423e:	4943      	ldr	r1, [pc, #268]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004240:	4313      	orrs	r3, r2
 8004242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004252:	4b3e      	ldr	r3, [pc, #248]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004258:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004260:	493a      	ldr	r1, [pc, #232]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004274:	4b35      	ldr	r3, [pc, #212]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004282:	4932      	ldr	r1, [pc, #200]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d011      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004296:	4b2d      	ldr	r3, [pc, #180]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a4:	4929      	ldr	r1, [pc, #164]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042b4:	d101      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80042b6:	2301      	movs	r3, #1
 80042b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80042c6:	2301      	movs	r3, #1
 80042c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042d6:	4b1d      	ldr	r3, [pc, #116]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e4:	4919      	ldr	r1, [pc, #100]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00b      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042f8:	4b14      	ldr	r3, [pc, #80]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004308:	4910      	ldr	r1, [pc, #64]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d006      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 80d9 	beq.w	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004324:	4b09      	ldr	r3, [pc, #36]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a08      	ldr	r2, [pc, #32]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800432a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800432e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004330:	f7fd fee4 	bl	80020fc <HAL_GetTick>
 8004334:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004336:	e00b      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004338:	f7fd fee0 	bl	80020fc <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b64      	cmp	r3, #100	; 0x64
 8004344:	d904      	bls.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e197      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800434a:	bf00      	nop
 800434c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004350:	4b6c      	ldr	r3, [pc, #432]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1ed      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d021      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436c:	2b00      	cmp	r3, #0
 800436e:	d11d      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004370:	4b64      	ldr	r3, [pc, #400]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004376:	0c1b      	lsrs	r3, r3, #16
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800437e:	4b61      	ldr	r3, [pc, #388]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004384:	0e1b      	lsrs	r3, r3, #24
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	019a      	lsls	r2, r3, #6
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	041b      	lsls	r3, r3, #16
 8004396:	431a      	orrs	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	061b      	lsls	r3, r3, #24
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	071b      	lsls	r3, r3, #28
 80043a4:	4957      	ldr	r1, [pc, #348]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d004      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043c0:	d00a      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d02e      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043d6:	d129      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043d8:	4b4a      	ldr	r3, [pc, #296]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043de:	0c1b      	lsrs	r3, r3, #16
 80043e0:	f003 0303 	and.w	r3, r3, #3
 80043e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043e6:	4b47      	ldr	r3, [pc, #284]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ec:	0f1b      	lsrs	r3, r3, #28
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	019a      	lsls	r2, r3, #6
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	041b      	lsls	r3, r3, #16
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	061b      	lsls	r3, r3, #24
 8004406:	431a      	orrs	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	071b      	lsls	r3, r3, #28
 800440c:	493d      	ldr	r1, [pc, #244]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004414:	4b3b      	ldr	r3, [pc, #236]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800441a:	f023 021f 	bic.w	r2, r3, #31
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	3b01      	subs	r3, #1
 8004424:	4937      	ldr	r1, [pc, #220]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d01d      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004438:	4b32      	ldr	r3, [pc, #200]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800443a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800443e:	0e1b      	lsrs	r3, r3, #24
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004446:	4b2f      	ldr	r3, [pc, #188]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800444c:	0f1b      	lsrs	r3, r3, #28
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	019a      	lsls	r2, r3, #6
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	041b      	lsls	r3, r3, #16
 8004460:	431a      	orrs	r2, r3
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	061b      	lsls	r3, r3, #24
 8004466:	431a      	orrs	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	071b      	lsls	r3, r3, #28
 800446c:	4925      	ldr	r1, [pc, #148]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d011      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	019a      	lsls	r2, r3, #6
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	041b      	lsls	r3, r3, #16
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	061b      	lsls	r3, r3, #24
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	071b      	lsls	r3, r3, #28
 800449c:	4919      	ldr	r1, [pc, #100]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044a4:	4b17      	ldr	r3, [pc, #92]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a16      	ldr	r2, [pc, #88]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b0:	f7fd fe24 	bl	80020fc <HAL_GetTick>
 80044b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044b6:	e008      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044b8:	f7fd fe20 	bl	80020fc <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b64      	cmp	r3, #100	; 0x64
 80044c4:	d901      	bls.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e0d7      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044ca:	4b0e      	ldr	r3, [pc, #56]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	f040 80cd 	bne.w	8004678 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80044de:	4b09      	ldr	r3, [pc, #36]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a08      	ldr	r2, [pc, #32]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ea:	f7fd fe07 	bl	80020fc <HAL_GetTick>
 80044ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044f0:	e00a      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044f2:	f7fd fe03 	bl	80020fc <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b64      	cmp	r3, #100	; 0x64
 80044fe:	d903      	bls.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e0ba      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004504:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004508:	4b5e      	ldr	r3, [pc, #376]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004514:	d0ed      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004532:	2b00      	cmp	r3, #0
 8004534:	d02e      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	2b00      	cmp	r3, #0
 800453c:	d12a      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800453e:	4b51      	ldr	r3, [pc, #324]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004544:	0c1b      	lsrs	r3, r3, #16
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800454c:	4b4d      	ldr	r3, [pc, #308]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004552:	0f1b      	lsrs	r3, r3, #28
 8004554:	f003 0307 	and.w	r3, r3, #7
 8004558:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	019a      	lsls	r2, r3, #6
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	041b      	lsls	r3, r3, #16
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	061b      	lsls	r3, r3, #24
 800456c:	431a      	orrs	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	071b      	lsls	r3, r3, #28
 8004572:	4944      	ldr	r1, [pc, #272]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800457a:	4b42      	ldr	r3, [pc, #264]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800457c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004580:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004588:	3b01      	subs	r3, #1
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	493d      	ldr	r1, [pc, #244]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800458e:	4313      	orrs	r3, r2
 8004590:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d022      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045a8:	d11d      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045aa:	4b36      	ldr	r3, [pc, #216]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b0:	0e1b      	lsrs	r3, r3, #24
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045b8:	4b32      	ldr	r3, [pc, #200]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045be:	0f1b      	lsrs	r3, r3, #28
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	019a      	lsls	r2, r3, #6
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	041b      	lsls	r3, r3, #16
 80045d2:	431a      	orrs	r2, r3
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	061b      	lsls	r3, r3, #24
 80045d8:	431a      	orrs	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	071b      	lsls	r3, r3, #28
 80045de:	4929      	ldr	r1, [pc, #164]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d028      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045f2:	4b24      	ldr	r3, [pc, #144]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f8:	0e1b      	lsrs	r3, r3, #24
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004600:	4b20      	ldr	r3, [pc, #128]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004606:	0c1b      	lsrs	r3, r3, #16
 8004608:	f003 0303 	and.w	r3, r3, #3
 800460c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	019a      	lsls	r2, r3, #6
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	041b      	lsls	r3, r3, #16
 8004618:	431a      	orrs	r2, r3
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	061b      	lsls	r3, r3, #24
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	071b      	lsls	r3, r3, #28
 8004626:	4917      	ldr	r1, [pc, #92]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800462e:	4b15      	ldr	r3, [pc, #84]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004634:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	4911      	ldr	r1, [pc, #68]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004644:	4b0f      	ldr	r3, [pc, #60]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a0e      	ldr	r2, [pc, #56]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800464a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800464e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004650:	f7fd fd54 	bl	80020fc <HAL_GetTick>
 8004654:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004656:	e008      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004658:	f7fd fd50 	bl	80020fc <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	; 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e007      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800466a:	4b06      	ldr	r3, [pc, #24]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004672:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004676:	d1ef      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3720      	adds	r7, #32
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40023800 	.word	0x40023800

08004688 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e049      	b.n	800472e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fd fb3c 	bl	8001d2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3304      	adds	r3, #4
 80046c4:	4619      	mov	r1, r3
 80046c6:	4610      	mov	r0, r2
 80046c8:	f000 fa44 	bl	8004b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d109      	bne.n	800475c <HAL_TIM_PWM_Start+0x24>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b01      	cmp	r3, #1
 8004752:	bf14      	ite	ne
 8004754:	2301      	movne	r3, #1
 8004756:	2300      	moveq	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	e03c      	b.n	80047d6 <HAL_TIM_PWM_Start+0x9e>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2b04      	cmp	r3, #4
 8004760:	d109      	bne.n	8004776 <HAL_TIM_PWM_Start+0x3e>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b01      	cmp	r3, #1
 800476c:	bf14      	ite	ne
 800476e:	2301      	movne	r3, #1
 8004770:	2300      	moveq	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	e02f      	b.n	80047d6 <HAL_TIM_PWM_Start+0x9e>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b08      	cmp	r3, #8
 800477a:	d109      	bne.n	8004790 <HAL_TIM_PWM_Start+0x58>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b01      	cmp	r3, #1
 8004786:	bf14      	ite	ne
 8004788:	2301      	movne	r3, #1
 800478a:	2300      	moveq	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	e022      	b.n	80047d6 <HAL_TIM_PWM_Start+0x9e>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b0c      	cmp	r3, #12
 8004794:	d109      	bne.n	80047aa <HAL_TIM_PWM_Start+0x72>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b01      	cmp	r3, #1
 80047a0:	bf14      	ite	ne
 80047a2:	2301      	movne	r3, #1
 80047a4:	2300      	moveq	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	e015      	b.n	80047d6 <HAL_TIM_PWM_Start+0x9e>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b10      	cmp	r3, #16
 80047ae:	d109      	bne.n	80047c4 <HAL_TIM_PWM_Start+0x8c>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	bf14      	ite	ne
 80047bc:	2301      	movne	r3, #1
 80047be:	2300      	moveq	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	e008      	b.n	80047d6 <HAL_TIM_PWM_Start+0x9e>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	bf14      	ite	ne
 80047d0:	2301      	movne	r3, #1
 80047d2:	2300      	moveq	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e092      	b.n	8004904 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d104      	bne.n	80047ee <HAL_TIM_PWM_Start+0xb6>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047ec:	e023      	b.n	8004836 <HAL_TIM_PWM_Start+0xfe>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d104      	bne.n	80047fe <HAL_TIM_PWM_Start+0xc6>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047fc:	e01b      	b.n	8004836 <HAL_TIM_PWM_Start+0xfe>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b08      	cmp	r3, #8
 8004802:	d104      	bne.n	800480e <HAL_TIM_PWM_Start+0xd6>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800480c:	e013      	b.n	8004836 <HAL_TIM_PWM_Start+0xfe>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b0c      	cmp	r3, #12
 8004812:	d104      	bne.n	800481e <HAL_TIM_PWM_Start+0xe6>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800481c:	e00b      	b.n	8004836 <HAL_TIM_PWM_Start+0xfe>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b10      	cmp	r3, #16
 8004822:	d104      	bne.n	800482e <HAL_TIM_PWM_Start+0xf6>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800482c:	e003      	b.n	8004836 <HAL_TIM_PWM_Start+0xfe>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2202      	movs	r2, #2
 8004832:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2201      	movs	r2, #1
 800483c:	6839      	ldr	r1, [r7, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fc86 	bl	8005150 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a30      	ldr	r2, [pc, #192]	; (800490c <HAL_TIM_PWM_Start+0x1d4>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d004      	beq.n	8004858 <HAL_TIM_PWM_Start+0x120>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a2f      	ldr	r2, [pc, #188]	; (8004910 <HAL_TIM_PWM_Start+0x1d8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d101      	bne.n	800485c <HAL_TIM_PWM_Start+0x124>
 8004858:	2301      	movs	r3, #1
 800485a:	e000      	b.n	800485e <HAL_TIM_PWM_Start+0x126>
 800485c:	2300      	movs	r3, #0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d007      	beq.n	8004872 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004870:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a25      	ldr	r2, [pc, #148]	; (800490c <HAL_TIM_PWM_Start+0x1d4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d022      	beq.n	80048c2 <HAL_TIM_PWM_Start+0x18a>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004884:	d01d      	beq.n	80048c2 <HAL_TIM_PWM_Start+0x18a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a22      	ldr	r2, [pc, #136]	; (8004914 <HAL_TIM_PWM_Start+0x1dc>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d018      	beq.n	80048c2 <HAL_TIM_PWM_Start+0x18a>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a20      	ldr	r2, [pc, #128]	; (8004918 <HAL_TIM_PWM_Start+0x1e0>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d013      	beq.n	80048c2 <HAL_TIM_PWM_Start+0x18a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a1f      	ldr	r2, [pc, #124]	; (800491c <HAL_TIM_PWM_Start+0x1e4>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d00e      	beq.n	80048c2 <HAL_TIM_PWM_Start+0x18a>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a19      	ldr	r2, [pc, #100]	; (8004910 <HAL_TIM_PWM_Start+0x1d8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d009      	beq.n	80048c2 <HAL_TIM_PWM_Start+0x18a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a1b      	ldr	r2, [pc, #108]	; (8004920 <HAL_TIM_PWM_Start+0x1e8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d004      	beq.n	80048c2 <HAL_TIM_PWM_Start+0x18a>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a19      	ldr	r2, [pc, #100]	; (8004924 <HAL_TIM_PWM_Start+0x1ec>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d115      	bne.n	80048ee <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	4b17      	ldr	r3, [pc, #92]	; (8004928 <HAL_TIM_PWM_Start+0x1f0>)
 80048ca:	4013      	ands	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b06      	cmp	r3, #6
 80048d2:	d015      	beq.n	8004900 <HAL_TIM_PWM_Start+0x1c8>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048da:	d011      	beq.n	8004900 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ec:	e008      	b.n	8004900 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0201 	orr.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	e000      	b.n	8004902 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004900:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40010000 	.word	0x40010000
 8004910:	40010400 	.word	0x40010400
 8004914:	40000400 	.word	0x40000400
 8004918:	40000800 	.word	0x40000800
 800491c:	40000c00 	.word	0x40000c00
 8004920:	40014000 	.word	0x40014000
 8004924:	40001800 	.word	0x40001800
 8004928:	00010007 	.word	0x00010007

0800492c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004938:	2300      	movs	r3, #0
 800493a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004942:	2b01      	cmp	r3, #1
 8004944:	d101      	bne.n	800494a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004946:	2302      	movs	r3, #2
 8004948:	e0ff      	b.n	8004b4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b14      	cmp	r3, #20
 8004956:	f200 80f0 	bhi.w	8004b3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800495a:	a201      	add	r2, pc, #4	; (adr r2, 8004960 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800495c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004960:	080049b5 	.word	0x080049b5
 8004964:	08004b3b 	.word	0x08004b3b
 8004968:	08004b3b 	.word	0x08004b3b
 800496c:	08004b3b 	.word	0x08004b3b
 8004970:	080049f5 	.word	0x080049f5
 8004974:	08004b3b 	.word	0x08004b3b
 8004978:	08004b3b 	.word	0x08004b3b
 800497c:	08004b3b 	.word	0x08004b3b
 8004980:	08004a37 	.word	0x08004a37
 8004984:	08004b3b 	.word	0x08004b3b
 8004988:	08004b3b 	.word	0x08004b3b
 800498c:	08004b3b 	.word	0x08004b3b
 8004990:	08004a77 	.word	0x08004a77
 8004994:	08004b3b 	.word	0x08004b3b
 8004998:	08004b3b 	.word	0x08004b3b
 800499c:	08004b3b 	.word	0x08004b3b
 80049a0:	08004ab9 	.word	0x08004ab9
 80049a4:	08004b3b 	.word	0x08004b3b
 80049a8:	08004b3b 	.word	0x08004b3b
 80049ac:	08004b3b 	.word	0x08004b3b
 80049b0:	08004af9 	.word	0x08004af9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68b9      	ldr	r1, [r7, #8]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 f96a 	bl	8004c94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0208 	orr.w	r2, r2, #8
 80049ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699a      	ldr	r2, [r3, #24]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0204 	bic.w	r2, r2, #4
 80049de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6999      	ldr	r1, [r3, #24]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	619a      	str	r2, [r3, #24]
      break;
 80049f2:	e0a5      	b.n	8004b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68b9      	ldr	r1, [r7, #8]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 f9bc 	bl	8004d78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699a      	ldr	r2, [r3, #24]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699a      	ldr	r2, [r3, #24]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6999      	ldr	r1, [r3, #24]
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	021a      	lsls	r2, r3, #8
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	619a      	str	r2, [r3, #24]
      break;
 8004a34:	e084      	b.n	8004b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68b9      	ldr	r1, [r7, #8]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 fa13 	bl	8004e68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	69da      	ldr	r2, [r3, #28]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f042 0208 	orr.w	r2, r2, #8
 8004a50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0204 	bic.w	r2, r2, #4
 8004a60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	69d9      	ldr	r1, [r3, #28]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	61da      	str	r2, [r3, #28]
      break;
 8004a74:	e064      	b.n	8004b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68b9      	ldr	r1, [r7, #8]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fa69 	bl	8004f54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	69da      	ldr	r2, [r3, #28]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69da      	ldr	r2, [r3, #28]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69d9      	ldr	r1, [r3, #28]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	021a      	lsls	r2, r3, #8
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	61da      	str	r2, [r3, #28]
      break;
 8004ab6:	e043      	b.n	8004b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68b9      	ldr	r1, [r7, #8]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 faa0 	bl	8005004 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0208 	orr.w	r2, r2, #8
 8004ad2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0204 	bic.w	r2, r2, #4
 8004ae2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	691a      	ldr	r2, [r3, #16]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004af6:	e023      	b.n	8004b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68b9      	ldr	r1, [r7, #8]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fad2 	bl	80050a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	021a      	lsls	r2, r3, #8
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b38:	e002      	b.n	8004b40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop

08004b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a40      	ldr	r2, [pc, #256]	; (8004c68 <TIM_Base_SetConfig+0x114>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d013      	beq.n	8004b94 <TIM_Base_SetConfig+0x40>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b72:	d00f      	beq.n	8004b94 <TIM_Base_SetConfig+0x40>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a3d      	ldr	r2, [pc, #244]	; (8004c6c <TIM_Base_SetConfig+0x118>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00b      	beq.n	8004b94 <TIM_Base_SetConfig+0x40>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a3c      	ldr	r2, [pc, #240]	; (8004c70 <TIM_Base_SetConfig+0x11c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d007      	beq.n	8004b94 <TIM_Base_SetConfig+0x40>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a3b      	ldr	r2, [pc, #236]	; (8004c74 <TIM_Base_SetConfig+0x120>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d003      	beq.n	8004b94 <TIM_Base_SetConfig+0x40>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a3a      	ldr	r2, [pc, #232]	; (8004c78 <TIM_Base_SetConfig+0x124>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d108      	bne.n	8004ba6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a2f      	ldr	r2, [pc, #188]	; (8004c68 <TIM_Base_SetConfig+0x114>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d02b      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb4:	d027      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a2c      	ldr	r2, [pc, #176]	; (8004c6c <TIM_Base_SetConfig+0x118>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d023      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a2b      	ldr	r2, [pc, #172]	; (8004c70 <TIM_Base_SetConfig+0x11c>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d01f      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a2a      	ldr	r2, [pc, #168]	; (8004c74 <TIM_Base_SetConfig+0x120>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d01b      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a29      	ldr	r2, [pc, #164]	; (8004c78 <TIM_Base_SetConfig+0x124>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d017      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a28      	ldr	r2, [pc, #160]	; (8004c7c <TIM_Base_SetConfig+0x128>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d013      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a27      	ldr	r2, [pc, #156]	; (8004c80 <TIM_Base_SetConfig+0x12c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00f      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a26      	ldr	r2, [pc, #152]	; (8004c84 <TIM_Base_SetConfig+0x130>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d00b      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a25      	ldr	r2, [pc, #148]	; (8004c88 <TIM_Base_SetConfig+0x134>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d007      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a24      	ldr	r2, [pc, #144]	; (8004c8c <TIM_Base_SetConfig+0x138>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d003      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a23      	ldr	r2, [pc, #140]	; (8004c90 <TIM_Base_SetConfig+0x13c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d108      	bne.n	8004c18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a0a      	ldr	r2, [pc, #40]	; (8004c68 <TIM_Base_SetConfig+0x114>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d003      	beq.n	8004c4c <TIM_Base_SetConfig+0xf8>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a0c      	ldr	r2, [pc, #48]	; (8004c78 <TIM_Base_SetConfig+0x124>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d103      	bne.n	8004c54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	615a      	str	r2, [r3, #20]
}
 8004c5a:	bf00      	nop
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	40010000 	.word	0x40010000
 8004c6c:	40000400 	.word	0x40000400
 8004c70:	40000800 	.word	0x40000800
 8004c74:	40000c00 	.word	0x40000c00
 8004c78:	40010400 	.word	0x40010400
 8004c7c:	40014000 	.word	0x40014000
 8004c80:	40014400 	.word	0x40014400
 8004c84:	40014800 	.word	0x40014800
 8004c88:	40001800 	.word	0x40001800
 8004c8c:	40001c00 	.word	0x40001c00
 8004c90:	40002000 	.word	0x40002000

08004c94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	f023 0201 	bic.w	r2, r3, #1
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4b2b      	ldr	r3, [pc, #172]	; (8004d6c <TIM_OC1_SetConfig+0xd8>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0303 	bic.w	r3, r3, #3
 8004cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f023 0302 	bic.w	r3, r3, #2
 8004cdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a21      	ldr	r2, [pc, #132]	; (8004d70 <TIM_OC1_SetConfig+0xdc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d003      	beq.n	8004cf8 <TIM_OC1_SetConfig+0x64>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a20      	ldr	r2, [pc, #128]	; (8004d74 <TIM_OC1_SetConfig+0xe0>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d10c      	bne.n	8004d12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f023 0308 	bic.w	r3, r3, #8
 8004cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f023 0304 	bic.w	r3, r3, #4
 8004d10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a16      	ldr	r2, [pc, #88]	; (8004d70 <TIM_OC1_SetConfig+0xdc>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d003      	beq.n	8004d22 <TIM_OC1_SetConfig+0x8e>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a15      	ldr	r2, [pc, #84]	; (8004d74 <TIM_OC1_SetConfig+0xe0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d111      	bne.n	8004d46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	621a      	str	r2, [r3, #32]
}
 8004d60:	bf00      	nop
 8004d62:	371c      	adds	r7, #28
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	fffeff8f 	.word	0xfffeff8f
 8004d70:	40010000 	.word	0x40010000
 8004d74:	40010400 	.word	0x40010400

08004d78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	f023 0210 	bic.w	r2, r3, #16
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4b2e      	ldr	r3, [pc, #184]	; (8004e5c <TIM_OC2_SetConfig+0xe4>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	021b      	lsls	r3, r3, #8
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f023 0320 	bic.w	r3, r3, #32
 8004dc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a23      	ldr	r2, [pc, #140]	; (8004e60 <TIM_OC2_SetConfig+0xe8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d003      	beq.n	8004de0 <TIM_OC2_SetConfig+0x68>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a22      	ldr	r2, [pc, #136]	; (8004e64 <TIM_OC2_SetConfig+0xec>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d10d      	bne.n	8004dfc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a18      	ldr	r2, [pc, #96]	; (8004e60 <TIM_OC2_SetConfig+0xe8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d003      	beq.n	8004e0c <TIM_OC2_SetConfig+0x94>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a17      	ldr	r2, [pc, #92]	; (8004e64 <TIM_OC2_SetConfig+0xec>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d113      	bne.n	8004e34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	621a      	str	r2, [r3, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	feff8fff 	.word	0xfeff8fff
 8004e60:	40010000 	.word	0x40010000
 8004e64:	40010400 	.word	0x40010400

08004e68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4b2d      	ldr	r3, [pc, #180]	; (8004f48 <TIM_OC3_SetConfig+0xe0>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0303 	bic.w	r3, r3, #3
 8004e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004eb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	021b      	lsls	r3, r3, #8
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a22      	ldr	r2, [pc, #136]	; (8004f4c <TIM_OC3_SetConfig+0xe4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d003      	beq.n	8004ece <TIM_OC3_SetConfig+0x66>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a21      	ldr	r2, [pc, #132]	; (8004f50 <TIM_OC3_SetConfig+0xe8>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d10d      	bne.n	8004eea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ed4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a17      	ldr	r2, [pc, #92]	; (8004f4c <TIM_OC3_SetConfig+0xe4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d003      	beq.n	8004efa <TIM_OC3_SetConfig+0x92>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a16      	ldr	r2, [pc, #88]	; (8004f50 <TIM_OC3_SetConfig+0xe8>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d113      	bne.n	8004f22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	621a      	str	r2, [r3, #32]
}
 8004f3c:	bf00      	nop
 8004f3e:	371c      	adds	r7, #28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	fffeff8f 	.word	0xfffeff8f
 8004f4c:	40010000 	.word	0x40010000
 8004f50:	40010400 	.word	0x40010400

08004f54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	4b1e      	ldr	r3, [pc, #120]	; (8004ff8 <TIM_OC4_SetConfig+0xa4>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	021b      	lsls	r3, r3, #8
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	031b      	lsls	r3, r3, #12
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a13      	ldr	r2, [pc, #76]	; (8004ffc <TIM_OC4_SetConfig+0xa8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d003      	beq.n	8004fbc <TIM_OC4_SetConfig+0x68>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a12      	ldr	r2, [pc, #72]	; (8005000 <TIM_OC4_SetConfig+0xac>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d109      	bne.n	8004fd0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	019b      	lsls	r3, r3, #6
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	621a      	str	r2, [r3, #32]
}
 8004fea:	bf00      	nop
 8004fec:	371c      	adds	r7, #28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	feff8fff 	.word	0xfeff8fff
 8004ffc:	40010000 	.word	0x40010000
 8005000:	40010400 	.word	0x40010400

08005004 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4b1b      	ldr	r3, [pc, #108]	; (800509c <TIM_OC5_SetConfig+0x98>)
 8005030:	4013      	ands	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005044:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	041b      	lsls	r3, r3, #16
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a12      	ldr	r2, [pc, #72]	; (80050a0 <TIM_OC5_SetConfig+0x9c>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d003      	beq.n	8005062 <TIM_OC5_SetConfig+0x5e>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a11      	ldr	r2, [pc, #68]	; (80050a4 <TIM_OC5_SetConfig+0xa0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d109      	bne.n	8005076 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005068:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	021b      	lsls	r3, r3, #8
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	621a      	str	r2, [r3, #32]
}
 8005090:	bf00      	nop
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	fffeff8f 	.word	0xfffeff8f
 80050a0:	40010000 	.word	0x40010000
 80050a4:	40010400 	.word	0x40010400

080050a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	4b1c      	ldr	r3, [pc, #112]	; (8005144 <TIM_OC6_SetConfig+0x9c>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	021b      	lsls	r3, r3, #8
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	051b      	lsls	r3, r3, #20
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a13      	ldr	r2, [pc, #76]	; (8005148 <TIM_OC6_SetConfig+0xa0>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d003      	beq.n	8005108 <TIM_OC6_SetConfig+0x60>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a12      	ldr	r2, [pc, #72]	; (800514c <TIM_OC6_SetConfig+0xa4>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d109      	bne.n	800511c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800510e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	029b      	lsls	r3, r3, #10
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	4313      	orrs	r3, r2
 800511a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	621a      	str	r2, [r3, #32]
}
 8005136:	bf00      	nop
 8005138:	371c      	adds	r7, #28
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	feff8fff 	.word	0xfeff8fff
 8005148:	40010000 	.word	0x40010000
 800514c:	40010400 	.word	0x40010400

08005150 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f003 031f 	and.w	r3, r3, #31
 8005162:	2201      	movs	r2, #1
 8005164:	fa02 f303 	lsl.w	r3, r2, r3
 8005168:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6a1a      	ldr	r2, [r3, #32]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	43db      	mvns	r3, r3
 8005172:	401a      	ands	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a1a      	ldr	r2, [r3, #32]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f003 031f 	and.w	r3, r3, #31
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	fa01 f303 	lsl.w	r3, r1, r3
 8005188:	431a      	orrs	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	621a      	str	r2, [r3, #32]
}
 800518e:	bf00      	nop
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
	...

0800519c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e06d      	b.n	8005290 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a30      	ldr	r2, [pc, #192]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d004      	beq.n	80051e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a2f      	ldr	r2, [pc, #188]	; (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d108      	bne.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005200:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4313      	orrs	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a20      	ldr	r2, [pc, #128]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d022      	beq.n	8005264 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005226:	d01d      	beq.n	8005264 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a1d      	ldr	r2, [pc, #116]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d018      	beq.n	8005264 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a1c      	ldr	r2, [pc, #112]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d013      	beq.n	8005264 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a1a      	ldr	r2, [pc, #104]	; (80052ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00e      	beq.n	8005264 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a15      	ldr	r2, [pc, #84]	; (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d009      	beq.n	8005264 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a16      	ldr	r2, [pc, #88]	; (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d004      	beq.n	8005264 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a15      	ldr	r2, [pc, #84]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d10c      	bne.n	800527e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800526a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	4313      	orrs	r3, r2
 8005274:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	40010000 	.word	0x40010000
 80052a0:	40010400 	.word	0x40010400
 80052a4:	40000400 	.word	0x40000400
 80052a8:	40000800 	.word	0x40000800
 80052ac:	40000c00 	.word	0x40000c00
 80052b0:	40014000 	.word	0x40014000
 80052b4:	40001800 	.word	0x40001800

080052b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e040      	b.n	800534c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d106      	bne.n	80052e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7fc fd7e 	bl	8001ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2224      	movs	r2, #36	; 0x24
 80052e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0201 	bic.w	r2, r2, #1
 80052f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f82c 	bl	8005354 <UART_SetConfig>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d101      	bne.n	8005306 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e022      	b.n	800534c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	2b00      	cmp	r3, #0
 800530c:	d002      	beq.n	8005314 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fa82 	bl	8005818 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005322:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689a      	ldr	r2, [r3, #8]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005332:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0201 	orr.w	r2, r2, #1
 8005342:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fb09 	bl	800595c <UART_CheckIdleState>
 800534a:	4603      	mov	r3, r0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b088      	sub	sp, #32
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	4ba7      	ldr	r3, [pc, #668]	; (800561c <UART_SetConfig+0x2c8>)
 8005380:	4013      	ands	r3, r2
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	6812      	ldr	r2, [r2, #0]
 8005386:	6979      	ldr	r1, [r7, #20]
 8005388:	430b      	orrs	r3, r1
 800538a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68da      	ldr	r2, [r3, #12]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a95      	ldr	r2, [pc, #596]	; (8005620 <UART_SetConfig+0x2cc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d120      	bne.n	8005412 <UART_SetConfig+0xbe>
 80053d0:	4b94      	ldr	r3, [pc, #592]	; (8005624 <UART_SetConfig+0x2d0>)
 80053d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d6:	f003 0303 	and.w	r3, r3, #3
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d816      	bhi.n	800540c <UART_SetConfig+0xb8>
 80053de:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <UART_SetConfig+0x90>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	080053f5 	.word	0x080053f5
 80053e8:	08005401 	.word	0x08005401
 80053ec:	080053fb 	.word	0x080053fb
 80053f0:	08005407 	.word	0x08005407
 80053f4:	2301      	movs	r3, #1
 80053f6:	77fb      	strb	r3, [r7, #31]
 80053f8:	e14f      	b.n	800569a <UART_SetConfig+0x346>
 80053fa:	2302      	movs	r3, #2
 80053fc:	77fb      	strb	r3, [r7, #31]
 80053fe:	e14c      	b.n	800569a <UART_SetConfig+0x346>
 8005400:	2304      	movs	r3, #4
 8005402:	77fb      	strb	r3, [r7, #31]
 8005404:	e149      	b.n	800569a <UART_SetConfig+0x346>
 8005406:	2308      	movs	r3, #8
 8005408:	77fb      	strb	r3, [r7, #31]
 800540a:	e146      	b.n	800569a <UART_SetConfig+0x346>
 800540c:	2310      	movs	r3, #16
 800540e:	77fb      	strb	r3, [r7, #31]
 8005410:	e143      	b.n	800569a <UART_SetConfig+0x346>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a84      	ldr	r2, [pc, #528]	; (8005628 <UART_SetConfig+0x2d4>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d132      	bne.n	8005482 <UART_SetConfig+0x12e>
 800541c:	4b81      	ldr	r3, [pc, #516]	; (8005624 <UART_SetConfig+0x2d0>)
 800541e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005422:	f003 030c 	and.w	r3, r3, #12
 8005426:	2b0c      	cmp	r3, #12
 8005428:	d828      	bhi.n	800547c <UART_SetConfig+0x128>
 800542a:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <UART_SetConfig+0xdc>)
 800542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005430:	08005465 	.word	0x08005465
 8005434:	0800547d 	.word	0x0800547d
 8005438:	0800547d 	.word	0x0800547d
 800543c:	0800547d 	.word	0x0800547d
 8005440:	08005471 	.word	0x08005471
 8005444:	0800547d 	.word	0x0800547d
 8005448:	0800547d 	.word	0x0800547d
 800544c:	0800547d 	.word	0x0800547d
 8005450:	0800546b 	.word	0x0800546b
 8005454:	0800547d 	.word	0x0800547d
 8005458:	0800547d 	.word	0x0800547d
 800545c:	0800547d 	.word	0x0800547d
 8005460:	08005477 	.word	0x08005477
 8005464:	2300      	movs	r3, #0
 8005466:	77fb      	strb	r3, [r7, #31]
 8005468:	e117      	b.n	800569a <UART_SetConfig+0x346>
 800546a:	2302      	movs	r3, #2
 800546c:	77fb      	strb	r3, [r7, #31]
 800546e:	e114      	b.n	800569a <UART_SetConfig+0x346>
 8005470:	2304      	movs	r3, #4
 8005472:	77fb      	strb	r3, [r7, #31]
 8005474:	e111      	b.n	800569a <UART_SetConfig+0x346>
 8005476:	2308      	movs	r3, #8
 8005478:	77fb      	strb	r3, [r7, #31]
 800547a:	e10e      	b.n	800569a <UART_SetConfig+0x346>
 800547c:	2310      	movs	r3, #16
 800547e:	77fb      	strb	r3, [r7, #31]
 8005480:	e10b      	b.n	800569a <UART_SetConfig+0x346>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a69      	ldr	r2, [pc, #420]	; (800562c <UART_SetConfig+0x2d8>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d120      	bne.n	80054ce <UART_SetConfig+0x17a>
 800548c:	4b65      	ldr	r3, [pc, #404]	; (8005624 <UART_SetConfig+0x2d0>)
 800548e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005492:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005496:	2b30      	cmp	r3, #48	; 0x30
 8005498:	d013      	beq.n	80054c2 <UART_SetConfig+0x16e>
 800549a:	2b30      	cmp	r3, #48	; 0x30
 800549c:	d814      	bhi.n	80054c8 <UART_SetConfig+0x174>
 800549e:	2b20      	cmp	r3, #32
 80054a0:	d009      	beq.n	80054b6 <UART_SetConfig+0x162>
 80054a2:	2b20      	cmp	r3, #32
 80054a4:	d810      	bhi.n	80054c8 <UART_SetConfig+0x174>
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <UART_SetConfig+0x15c>
 80054aa:	2b10      	cmp	r3, #16
 80054ac:	d006      	beq.n	80054bc <UART_SetConfig+0x168>
 80054ae:	e00b      	b.n	80054c8 <UART_SetConfig+0x174>
 80054b0:	2300      	movs	r3, #0
 80054b2:	77fb      	strb	r3, [r7, #31]
 80054b4:	e0f1      	b.n	800569a <UART_SetConfig+0x346>
 80054b6:	2302      	movs	r3, #2
 80054b8:	77fb      	strb	r3, [r7, #31]
 80054ba:	e0ee      	b.n	800569a <UART_SetConfig+0x346>
 80054bc:	2304      	movs	r3, #4
 80054be:	77fb      	strb	r3, [r7, #31]
 80054c0:	e0eb      	b.n	800569a <UART_SetConfig+0x346>
 80054c2:	2308      	movs	r3, #8
 80054c4:	77fb      	strb	r3, [r7, #31]
 80054c6:	e0e8      	b.n	800569a <UART_SetConfig+0x346>
 80054c8:	2310      	movs	r3, #16
 80054ca:	77fb      	strb	r3, [r7, #31]
 80054cc:	e0e5      	b.n	800569a <UART_SetConfig+0x346>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a57      	ldr	r2, [pc, #348]	; (8005630 <UART_SetConfig+0x2dc>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d120      	bne.n	800551a <UART_SetConfig+0x1c6>
 80054d8:	4b52      	ldr	r3, [pc, #328]	; (8005624 <UART_SetConfig+0x2d0>)
 80054da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054e2:	2bc0      	cmp	r3, #192	; 0xc0
 80054e4:	d013      	beq.n	800550e <UART_SetConfig+0x1ba>
 80054e6:	2bc0      	cmp	r3, #192	; 0xc0
 80054e8:	d814      	bhi.n	8005514 <UART_SetConfig+0x1c0>
 80054ea:	2b80      	cmp	r3, #128	; 0x80
 80054ec:	d009      	beq.n	8005502 <UART_SetConfig+0x1ae>
 80054ee:	2b80      	cmp	r3, #128	; 0x80
 80054f0:	d810      	bhi.n	8005514 <UART_SetConfig+0x1c0>
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <UART_SetConfig+0x1a8>
 80054f6:	2b40      	cmp	r3, #64	; 0x40
 80054f8:	d006      	beq.n	8005508 <UART_SetConfig+0x1b4>
 80054fa:	e00b      	b.n	8005514 <UART_SetConfig+0x1c0>
 80054fc:	2300      	movs	r3, #0
 80054fe:	77fb      	strb	r3, [r7, #31]
 8005500:	e0cb      	b.n	800569a <UART_SetConfig+0x346>
 8005502:	2302      	movs	r3, #2
 8005504:	77fb      	strb	r3, [r7, #31]
 8005506:	e0c8      	b.n	800569a <UART_SetConfig+0x346>
 8005508:	2304      	movs	r3, #4
 800550a:	77fb      	strb	r3, [r7, #31]
 800550c:	e0c5      	b.n	800569a <UART_SetConfig+0x346>
 800550e:	2308      	movs	r3, #8
 8005510:	77fb      	strb	r3, [r7, #31]
 8005512:	e0c2      	b.n	800569a <UART_SetConfig+0x346>
 8005514:	2310      	movs	r3, #16
 8005516:	77fb      	strb	r3, [r7, #31]
 8005518:	e0bf      	b.n	800569a <UART_SetConfig+0x346>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a45      	ldr	r2, [pc, #276]	; (8005634 <UART_SetConfig+0x2e0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d125      	bne.n	8005570 <UART_SetConfig+0x21c>
 8005524:	4b3f      	ldr	r3, [pc, #252]	; (8005624 <UART_SetConfig+0x2d0>)
 8005526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005532:	d017      	beq.n	8005564 <UART_SetConfig+0x210>
 8005534:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005538:	d817      	bhi.n	800556a <UART_SetConfig+0x216>
 800553a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800553e:	d00b      	beq.n	8005558 <UART_SetConfig+0x204>
 8005540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005544:	d811      	bhi.n	800556a <UART_SetConfig+0x216>
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <UART_SetConfig+0x1fe>
 800554a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800554e:	d006      	beq.n	800555e <UART_SetConfig+0x20a>
 8005550:	e00b      	b.n	800556a <UART_SetConfig+0x216>
 8005552:	2300      	movs	r3, #0
 8005554:	77fb      	strb	r3, [r7, #31]
 8005556:	e0a0      	b.n	800569a <UART_SetConfig+0x346>
 8005558:	2302      	movs	r3, #2
 800555a:	77fb      	strb	r3, [r7, #31]
 800555c:	e09d      	b.n	800569a <UART_SetConfig+0x346>
 800555e:	2304      	movs	r3, #4
 8005560:	77fb      	strb	r3, [r7, #31]
 8005562:	e09a      	b.n	800569a <UART_SetConfig+0x346>
 8005564:	2308      	movs	r3, #8
 8005566:	77fb      	strb	r3, [r7, #31]
 8005568:	e097      	b.n	800569a <UART_SetConfig+0x346>
 800556a:	2310      	movs	r3, #16
 800556c:	77fb      	strb	r3, [r7, #31]
 800556e:	e094      	b.n	800569a <UART_SetConfig+0x346>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a30      	ldr	r2, [pc, #192]	; (8005638 <UART_SetConfig+0x2e4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d125      	bne.n	80055c6 <UART_SetConfig+0x272>
 800557a:	4b2a      	ldr	r3, [pc, #168]	; (8005624 <UART_SetConfig+0x2d0>)
 800557c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005580:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005584:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005588:	d017      	beq.n	80055ba <UART_SetConfig+0x266>
 800558a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800558e:	d817      	bhi.n	80055c0 <UART_SetConfig+0x26c>
 8005590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005594:	d00b      	beq.n	80055ae <UART_SetConfig+0x25a>
 8005596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800559a:	d811      	bhi.n	80055c0 <UART_SetConfig+0x26c>
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <UART_SetConfig+0x254>
 80055a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a4:	d006      	beq.n	80055b4 <UART_SetConfig+0x260>
 80055a6:	e00b      	b.n	80055c0 <UART_SetConfig+0x26c>
 80055a8:	2301      	movs	r3, #1
 80055aa:	77fb      	strb	r3, [r7, #31]
 80055ac:	e075      	b.n	800569a <UART_SetConfig+0x346>
 80055ae:	2302      	movs	r3, #2
 80055b0:	77fb      	strb	r3, [r7, #31]
 80055b2:	e072      	b.n	800569a <UART_SetConfig+0x346>
 80055b4:	2304      	movs	r3, #4
 80055b6:	77fb      	strb	r3, [r7, #31]
 80055b8:	e06f      	b.n	800569a <UART_SetConfig+0x346>
 80055ba:	2308      	movs	r3, #8
 80055bc:	77fb      	strb	r3, [r7, #31]
 80055be:	e06c      	b.n	800569a <UART_SetConfig+0x346>
 80055c0:	2310      	movs	r3, #16
 80055c2:	77fb      	strb	r3, [r7, #31]
 80055c4:	e069      	b.n	800569a <UART_SetConfig+0x346>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a1c      	ldr	r2, [pc, #112]	; (800563c <UART_SetConfig+0x2e8>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d137      	bne.n	8005640 <UART_SetConfig+0x2ec>
 80055d0:	4b14      	ldr	r3, [pc, #80]	; (8005624 <UART_SetConfig+0x2d0>)
 80055d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80055da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055de:	d017      	beq.n	8005610 <UART_SetConfig+0x2bc>
 80055e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055e4:	d817      	bhi.n	8005616 <UART_SetConfig+0x2c2>
 80055e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ea:	d00b      	beq.n	8005604 <UART_SetConfig+0x2b0>
 80055ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055f0:	d811      	bhi.n	8005616 <UART_SetConfig+0x2c2>
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <UART_SetConfig+0x2aa>
 80055f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055fa:	d006      	beq.n	800560a <UART_SetConfig+0x2b6>
 80055fc:	e00b      	b.n	8005616 <UART_SetConfig+0x2c2>
 80055fe:	2300      	movs	r3, #0
 8005600:	77fb      	strb	r3, [r7, #31]
 8005602:	e04a      	b.n	800569a <UART_SetConfig+0x346>
 8005604:	2302      	movs	r3, #2
 8005606:	77fb      	strb	r3, [r7, #31]
 8005608:	e047      	b.n	800569a <UART_SetConfig+0x346>
 800560a:	2304      	movs	r3, #4
 800560c:	77fb      	strb	r3, [r7, #31]
 800560e:	e044      	b.n	800569a <UART_SetConfig+0x346>
 8005610:	2308      	movs	r3, #8
 8005612:	77fb      	strb	r3, [r7, #31]
 8005614:	e041      	b.n	800569a <UART_SetConfig+0x346>
 8005616:	2310      	movs	r3, #16
 8005618:	77fb      	strb	r3, [r7, #31]
 800561a:	e03e      	b.n	800569a <UART_SetConfig+0x346>
 800561c:	efff69f3 	.word	0xefff69f3
 8005620:	40011000 	.word	0x40011000
 8005624:	40023800 	.word	0x40023800
 8005628:	40004400 	.word	0x40004400
 800562c:	40004800 	.word	0x40004800
 8005630:	40004c00 	.word	0x40004c00
 8005634:	40005000 	.word	0x40005000
 8005638:	40011400 	.word	0x40011400
 800563c:	40007800 	.word	0x40007800
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a71      	ldr	r2, [pc, #452]	; (800580c <UART_SetConfig+0x4b8>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d125      	bne.n	8005696 <UART_SetConfig+0x342>
 800564a:	4b71      	ldr	r3, [pc, #452]	; (8005810 <UART_SetConfig+0x4bc>)
 800564c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005654:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005658:	d017      	beq.n	800568a <UART_SetConfig+0x336>
 800565a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800565e:	d817      	bhi.n	8005690 <UART_SetConfig+0x33c>
 8005660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005664:	d00b      	beq.n	800567e <UART_SetConfig+0x32a>
 8005666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800566a:	d811      	bhi.n	8005690 <UART_SetConfig+0x33c>
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <UART_SetConfig+0x324>
 8005670:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005674:	d006      	beq.n	8005684 <UART_SetConfig+0x330>
 8005676:	e00b      	b.n	8005690 <UART_SetConfig+0x33c>
 8005678:	2300      	movs	r3, #0
 800567a:	77fb      	strb	r3, [r7, #31]
 800567c:	e00d      	b.n	800569a <UART_SetConfig+0x346>
 800567e:	2302      	movs	r3, #2
 8005680:	77fb      	strb	r3, [r7, #31]
 8005682:	e00a      	b.n	800569a <UART_SetConfig+0x346>
 8005684:	2304      	movs	r3, #4
 8005686:	77fb      	strb	r3, [r7, #31]
 8005688:	e007      	b.n	800569a <UART_SetConfig+0x346>
 800568a:	2308      	movs	r3, #8
 800568c:	77fb      	strb	r3, [r7, #31]
 800568e:	e004      	b.n	800569a <UART_SetConfig+0x346>
 8005690:	2310      	movs	r3, #16
 8005692:	77fb      	strb	r3, [r7, #31]
 8005694:	e001      	b.n	800569a <UART_SetConfig+0x346>
 8005696:	2310      	movs	r3, #16
 8005698:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a2:	d15a      	bne.n	800575a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80056a4:	7ffb      	ldrb	r3, [r7, #31]
 80056a6:	2b08      	cmp	r3, #8
 80056a8:	d827      	bhi.n	80056fa <UART_SetConfig+0x3a6>
 80056aa:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <UART_SetConfig+0x35c>)
 80056ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b0:	080056d5 	.word	0x080056d5
 80056b4:	080056dd 	.word	0x080056dd
 80056b8:	080056e5 	.word	0x080056e5
 80056bc:	080056fb 	.word	0x080056fb
 80056c0:	080056eb 	.word	0x080056eb
 80056c4:	080056fb 	.word	0x080056fb
 80056c8:	080056fb 	.word	0x080056fb
 80056cc:	080056fb 	.word	0x080056fb
 80056d0:	080056f3 	.word	0x080056f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056d4:	f7fe fbc0 	bl	8003e58 <HAL_RCC_GetPCLK1Freq>
 80056d8:	61b8      	str	r0, [r7, #24]
        break;
 80056da:	e013      	b.n	8005704 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056dc:	f7fe fbd0 	bl	8003e80 <HAL_RCC_GetPCLK2Freq>
 80056e0:	61b8      	str	r0, [r7, #24]
        break;
 80056e2:	e00f      	b.n	8005704 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056e4:	4b4b      	ldr	r3, [pc, #300]	; (8005814 <UART_SetConfig+0x4c0>)
 80056e6:	61bb      	str	r3, [r7, #24]
        break;
 80056e8:	e00c      	b.n	8005704 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ea:	f7fe fac7 	bl	8003c7c <HAL_RCC_GetSysClockFreq>
 80056ee:	61b8      	str	r0, [r7, #24]
        break;
 80056f0:	e008      	b.n	8005704 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056f6:	61bb      	str	r3, [r7, #24]
        break;
 80056f8:	e004      	b.n	8005704 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	77bb      	strb	r3, [r7, #30]
        break;
 8005702:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d074      	beq.n	80057f4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	005a      	lsls	r2, r3, #1
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	085b      	lsrs	r3, r3, #1
 8005714:	441a      	add	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	fbb2 f3f3 	udiv	r3, r2, r3
 800571e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	2b0f      	cmp	r3, #15
 8005724:	d916      	bls.n	8005754 <UART_SetConfig+0x400>
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800572c:	d212      	bcs.n	8005754 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	b29b      	uxth	r3, r3
 8005732:	f023 030f 	bic.w	r3, r3, #15
 8005736:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	085b      	lsrs	r3, r3, #1
 800573c:	b29b      	uxth	r3, r3
 800573e:	f003 0307 	and.w	r3, r3, #7
 8005742:	b29a      	uxth	r2, r3
 8005744:	89fb      	ldrh	r3, [r7, #14]
 8005746:	4313      	orrs	r3, r2
 8005748:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	89fa      	ldrh	r2, [r7, #14]
 8005750:	60da      	str	r2, [r3, #12]
 8005752:	e04f      	b.n	80057f4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	77bb      	strb	r3, [r7, #30]
 8005758:	e04c      	b.n	80057f4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800575a:	7ffb      	ldrb	r3, [r7, #31]
 800575c:	2b08      	cmp	r3, #8
 800575e:	d828      	bhi.n	80057b2 <UART_SetConfig+0x45e>
 8005760:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <UART_SetConfig+0x414>)
 8005762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005766:	bf00      	nop
 8005768:	0800578d 	.word	0x0800578d
 800576c:	08005795 	.word	0x08005795
 8005770:	0800579d 	.word	0x0800579d
 8005774:	080057b3 	.word	0x080057b3
 8005778:	080057a3 	.word	0x080057a3
 800577c:	080057b3 	.word	0x080057b3
 8005780:	080057b3 	.word	0x080057b3
 8005784:	080057b3 	.word	0x080057b3
 8005788:	080057ab 	.word	0x080057ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800578c:	f7fe fb64 	bl	8003e58 <HAL_RCC_GetPCLK1Freq>
 8005790:	61b8      	str	r0, [r7, #24]
        break;
 8005792:	e013      	b.n	80057bc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005794:	f7fe fb74 	bl	8003e80 <HAL_RCC_GetPCLK2Freq>
 8005798:	61b8      	str	r0, [r7, #24]
        break;
 800579a:	e00f      	b.n	80057bc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800579c:	4b1d      	ldr	r3, [pc, #116]	; (8005814 <UART_SetConfig+0x4c0>)
 800579e:	61bb      	str	r3, [r7, #24]
        break;
 80057a0:	e00c      	b.n	80057bc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057a2:	f7fe fa6b 	bl	8003c7c <HAL_RCC_GetSysClockFreq>
 80057a6:	61b8      	str	r0, [r7, #24]
        break;
 80057a8:	e008      	b.n	80057bc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ae:	61bb      	str	r3, [r7, #24]
        break;
 80057b0:	e004      	b.n	80057bc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	77bb      	strb	r3, [r7, #30]
        break;
 80057ba:	bf00      	nop
    }

    if (pclk != 0U)
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d018      	beq.n	80057f4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	085a      	lsrs	r2, r3, #1
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	441a      	add	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	2b0f      	cmp	r3, #15
 80057da:	d909      	bls.n	80057f0 <UART_SetConfig+0x49c>
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057e2:	d205      	bcs.n	80057f0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	60da      	str	r2, [r3, #12]
 80057ee:	e001      	b.n	80057f4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005800:	7fbb      	ldrb	r3, [r7, #30]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3720      	adds	r7, #32
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	40007c00 	.word	0x40007c00
 8005810:	40023800 	.word	0x40023800
 8005814:	00f42400 	.word	0x00f42400

08005818 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00a      	beq.n	8005842 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	430a      	orrs	r2, r1
 8005840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00a      	beq.n	8005864 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00a      	beq.n	8005886 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	f003 0308 	and.w	r3, r3, #8
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00a      	beq.n	80058a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	430a      	orrs	r2, r1
 80058a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00a      	beq.n	80058ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	f003 0320 	and.w	r3, r3, #32
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00a      	beq.n	80058ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d01a      	beq.n	800592e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005916:	d10a      	bne.n	800592e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	605a      	str	r2, [r3, #4]
  }
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af02      	add	r7, sp, #8
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800596c:	f7fc fbc6 	bl	80020fc <HAL_GetTick>
 8005970:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b08      	cmp	r3, #8
 800597e:	d10e      	bne.n	800599e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005980:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f817 	bl	80059c2 <UART_WaitOnFlagUntilTimeout>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e00d      	b.n	80059ba <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2220      	movs	r2, #32
 80059a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b09c      	sub	sp, #112	; 0x70
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	60f8      	str	r0, [r7, #12]
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	603b      	str	r3, [r7, #0]
 80059ce:	4613      	mov	r3, r2
 80059d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d2:	e0a5      	b.n	8005b20 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059da:	f000 80a1 	beq.w	8005b20 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059de:	f7fc fb8d 	bl	80020fc <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d302      	bcc.n	80059f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80059ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d13e      	bne.n	8005a72 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a08:	667b      	str	r3, [r7, #100]	; 0x64
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a14:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e6      	bne.n	80059f4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3308      	adds	r3, #8
 8005a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	663b      	str	r3, [r7, #96]	; 0x60
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3308      	adds	r3, #8
 8005a44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a46:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a4e:	e841 2300 	strex	r3, r2, [r1]
 8005a52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1e5      	bne.n	8005a26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e067      	b.n	8005b42 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d04f      	beq.n	8005b20 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a8e:	d147      	bne.n	8005b20 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa2:	e853 3f00 	ldrex	r3, [r3]
 8005aa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005aae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8005aba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005abe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ac0:	e841 2300 	strex	r3, r2, [r1]
 8005ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e6      	bne.n	8005a9a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3308      	adds	r3, #8
 8005ad2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	613b      	str	r3, [r7, #16]
   return(result);
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f023 0301 	bic.w	r3, r3, #1
 8005ae2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3308      	adds	r3, #8
 8005aea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005aec:	623a      	str	r2, [r7, #32]
 8005aee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	69f9      	ldr	r1, [r7, #28]
 8005af2:	6a3a      	ldr	r2, [r7, #32]
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e5      	bne.n	8005acc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2220      	movs	r2, #32
 8005b04:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e010      	b.n	8005b42 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	69da      	ldr	r2, [r3, #28]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	bf0c      	ite	eq
 8005b30:	2301      	moveq	r3, #1
 8005b32:	2300      	movne	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	461a      	mov	r2, r3
 8005b38:	79fb      	ldrb	r3, [r7, #7]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	f43f af4a 	beq.w	80059d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3770      	adds	r7, #112	; 0x70
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
	...

08005b4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b4c:	b084      	sub	sp, #16
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b084      	sub	sp, #16
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	f107 001c 	add.w	r0, r7, #28
 8005b5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d120      	bne.n	8005ba6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	4b20      	ldr	r3, [pc, #128]	; (8005bf8 <USB_CoreInit+0xac>)
 8005b76:	4013      	ands	r3, r2
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d105      	bne.n	8005b9a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fa92 	bl	80060c4 <USB_CoreReset>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	73fb      	strb	r3, [r7, #15]
 8005ba4:	e010      	b.n	8005bc8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fa86 	bl	80060c4 <USB_CoreReset>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d10b      	bne.n	8005be6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f043 0206 	orr.w	r2, r3, #6
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f043 0220 	orr.w	r2, r3, #32
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bf2:	b004      	add	sp, #16
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	ffbdffbf 	.word	0xffbdffbf

08005bfc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f023 0201 	bic.w	r2, r3, #1
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b084      	sub	sp, #16
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	460b      	mov	r3, r1
 8005c28:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c3a:	78fb      	ldrb	r3, [r7, #3]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d115      	bne.n	8005c6c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c4c:	2001      	movs	r0, #1
 8005c4e:	f7fc fa61 	bl	8002114 <HAL_Delay>
      ms++;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	3301      	adds	r3, #1
 8005c56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fa25 	bl	80060a8 <USB_GetMode>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d01e      	beq.n	8005ca2 <USB_SetCurrentMode+0x84>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b31      	cmp	r3, #49	; 0x31
 8005c68:	d9f0      	bls.n	8005c4c <USB_SetCurrentMode+0x2e>
 8005c6a:	e01a      	b.n	8005ca2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c6c:	78fb      	ldrb	r3, [r7, #3]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d115      	bne.n	8005c9e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c7e:	2001      	movs	r0, #1
 8005c80:	f7fc fa48 	bl	8002114 <HAL_Delay>
      ms++;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3301      	adds	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fa0c 	bl	80060a8 <USB_GetMode>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d005      	beq.n	8005ca2 <USB_SetCurrentMode+0x84>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2b31      	cmp	r3, #49	; 0x31
 8005c9a:	d9f0      	bls.n	8005c7e <USB_SetCurrentMode+0x60>
 8005c9c:	e001      	b.n	8005ca2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e005      	b.n	8005cae <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b32      	cmp	r3, #50	; 0x32
 8005ca6:	d101      	bne.n	8005cac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e000      	b.n	8005cae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cb8:	b084      	sub	sp, #16
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b086      	sub	sp, #24
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005cc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	613b      	str	r3, [r7, #16]
 8005cd6:	e009      	b.n	8005cec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	3340      	adds	r3, #64	; 0x40
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	613b      	str	r3, [r7, #16]
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	2b0e      	cmp	r3, #14
 8005cf0:	d9f2      	bls.n	8005cd8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d11c      	bne.n	8005d32 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d06:	f043 0302 	orr.w	r3, r3, #2
 8005d0a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d10:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	e005      	b.n	8005d3e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d44:	461a      	mov	r2, r3
 8005d46:	2300      	movs	r3, #0
 8005d48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d50:	4619      	mov	r1, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d58:	461a      	mov	r2, r3
 8005d5a:	680b      	ldr	r3, [r1, #0]
 8005d5c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d10c      	bne.n	8005d7e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d104      	bne.n	8005d74 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f961 	bl	8006034 <USB_SetDevSpeed>
 8005d72:	e008      	b.n	8005d86 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d74:	2101      	movs	r1, #1
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f95c 	bl	8006034 <USB_SetDevSpeed>
 8005d7c:	e003      	b.n	8005d86 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d7e:	2103      	movs	r1, #3
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 f957 	bl	8006034 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d86:	2110      	movs	r1, #16
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f8f3 	bl	8005f74 <USB_FlushTxFifo>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f91d 	bl	8005fd8 <USB_FlushRxFifo>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dae:	461a      	mov	r2, r3
 8005db0:	2300      	movs	r3, #0
 8005db2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dba:	461a      	mov	r2, r3
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	2300      	movs	r3, #0
 8005dca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dcc:	2300      	movs	r3, #0
 8005dce:	613b      	str	r3, [r7, #16]
 8005dd0:	e043      	b.n	8005e5a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005de4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005de8:	d118      	bne.n	8005e1c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10a      	bne.n	8005e06 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	e013      	b.n	8005e2e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e12:	461a      	mov	r2, r3
 8005e14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	e008      	b.n	8005e2e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e28:	461a      	mov	r2, r3
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	3301      	adds	r3, #1
 8005e58:	613b      	str	r3, [r7, #16]
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d3b7      	bcc.n	8005dd2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e62:	2300      	movs	r3, #0
 8005e64:	613b      	str	r3, [r7, #16]
 8005e66:	e043      	b.n	8005ef0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e7e:	d118      	bne.n	8005eb2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10a      	bne.n	8005e9c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e92:	461a      	mov	r2, r3
 8005e94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	e013      	b.n	8005ec4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	e008      	b.n	8005ec4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ee8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	3301      	adds	r3, #1
 8005eee:	613b      	str	r3, [r7, #16]
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d3b7      	bcc.n	8005e68 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005f18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d105      	bne.n	8005f2c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	f043 0210 	orr.w	r2, r3, #16
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	699a      	ldr	r2, [r3, #24]
 8005f30:	4b0e      	ldr	r3, [pc, #56]	; (8005f6c <USB_DevInit+0x2b4>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d005      	beq.n	8005f4a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	f043 0208 	orr.w	r2, r3, #8
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d105      	bne.n	8005f5c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	699a      	ldr	r2, [r3, #24]
 8005f54:	4b06      	ldr	r3, [pc, #24]	; (8005f70 <USB_DevInit+0x2b8>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f68:	b004      	add	sp, #16
 8005f6a:	4770      	bx	lr
 8005f6c:	803c3800 	.word	0x803c3800
 8005f70:	40000004 	.word	0x40000004

08005f74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3301      	adds	r3, #1
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	4a12      	ldr	r2, [pc, #72]	; (8005fd4 <USB_FlushTxFifo+0x60>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d901      	bls.n	8005f92 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e01a      	b.n	8005fc8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	daf3      	bge.n	8005f82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	019b      	lsls	r3, r3, #6
 8005fa2:	f043 0220 	orr.w	r2, r3, #32
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	3301      	adds	r3, #1
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	4a08      	ldr	r2, [pc, #32]	; (8005fd4 <USB_FlushTxFifo+0x60>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d901      	bls.n	8005fba <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e006      	b.n	8005fc8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	f003 0320 	and.w	r3, r3, #32
 8005fc2:	2b20      	cmp	r3, #32
 8005fc4:	d0f1      	beq.n	8005faa <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	00030d40 	.word	0x00030d40

08005fd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	4a11      	ldr	r2, [pc, #68]	; (8006030 <USB_FlushRxFifo+0x58>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d901      	bls.n	8005ff4 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e017      	b.n	8006024 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	daf3      	bge.n	8005fe4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2210      	movs	r2, #16
 8006004:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3301      	adds	r3, #1
 800600a:	60fb      	str	r3, [r7, #12]
 800600c:	4a08      	ldr	r2, [pc, #32]	; (8006030 <USB_FlushRxFifo+0x58>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d901      	bls.n	8006016 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e006      	b.n	8006024 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0310 	and.w	r3, r3, #16
 800601e:	2b10      	cmp	r3, #16
 8006020:	d0f1      	beq.n	8006006 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	00030d40 	.word	0x00030d40

08006034 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	460b      	mov	r3, r1
 800603e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	78fb      	ldrb	r3, [r7, #3]
 800604e:	68f9      	ldr	r1, [r7, #12]
 8006050:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006054:	4313      	orrs	r3, r2
 8006056:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006066:	b480      	push	{r7}
 8006068:	b085      	sub	sp, #20
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006080:	f023 0303 	bic.w	r3, r3, #3
 8006084:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006094:	f043 0302 	orr.w	r3, r3, #2
 8006098:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	f003 0301 	and.w	r3, r3, #1
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	3301      	adds	r3, #1
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	4a13      	ldr	r2, [pc, #76]	; (8006124 <USB_CoreReset+0x60>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d901      	bls.n	80060e0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e01a      	b.n	8006116 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	daf3      	bge.n	80060d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	f043 0201 	orr.w	r2, r3, #1
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3301      	adds	r3, #1
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	4a09      	ldr	r2, [pc, #36]	; (8006124 <USB_CoreReset+0x60>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d901      	bls.n	8006108 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e006      	b.n	8006116 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b01      	cmp	r3, #1
 8006112:	d0f1      	beq.n	80060f8 <USB_CoreReset+0x34>

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	00030d40 	.word	0x00030d40

08006128 <__libc_init_array>:
 8006128:	b570      	push	{r4, r5, r6, lr}
 800612a:	4d0d      	ldr	r5, [pc, #52]	; (8006160 <__libc_init_array+0x38>)
 800612c:	4c0d      	ldr	r4, [pc, #52]	; (8006164 <__libc_init_array+0x3c>)
 800612e:	1b64      	subs	r4, r4, r5
 8006130:	10a4      	asrs	r4, r4, #2
 8006132:	2600      	movs	r6, #0
 8006134:	42a6      	cmp	r6, r4
 8006136:	d109      	bne.n	800614c <__libc_init_array+0x24>
 8006138:	4d0b      	ldr	r5, [pc, #44]	; (8006168 <__libc_init_array+0x40>)
 800613a:	4c0c      	ldr	r4, [pc, #48]	; (800616c <__libc_init_array+0x44>)
 800613c:	f000 f820 	bl	8006180 <_init>
 8006140:	1b64      	subs	r4, r4, r5
 8006142:	10a4      	asrs	r4, r4, #2
 8006144:	2600      	movs	r6, #0
 8006146:	42a6      	cmp	r6, r4
 8006148:	d105      	bne.n	8006156 <__libc_init_array+0x2e>
 800614a:	bd70      	pop	{r4, r5, r6, pc}
 800614c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006150:	4798      	blx	r3
 8006152:	3601      	adds	r6, #1
 8006154:	e7ee      	b.n	8006134 <__libc_init_array+0xc>
 8006156:	f855 3b04 	ldr.w	r3, [r5], #4
 800615a:	4798      	blx	r3
 800615c:	3601      	adds	r6, #1
 800615e:	e7f2      	b.n	8006146 <__libc_init_array+0x1e>
 8006160:	080061b8 	.word	0x080061b8
 8006164:	080061b8 	.word	0x080061b8
 8006168:	080061b8 	.word	0x080061b8
 800616c:	080061bc 	.word	0x080061bc

08006170 <memset>:
 8006170:	4402      	add	r2, r0
 8006172:	4603      	mov	r3, r0
 8006174:	4293      	cmp	r3, r2
 8006176:	d100      	bne.n	800617a <memset+0xa>
 8006178:	4770      	bx	lr
 800617a:	f803 1b01 	strb.w	r1, [r3], #1
 800617e:	e7f9      	b.n	8006174 <memset+0x4>

08006180 <_init>:
 8006180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006182:	bf00      	nop
 8006184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006186:	bc08      	pop	{r3}
 8006188:	469e      	mov	lr, r3
 800618a:	4770      	bx	lr

0800618c <_fini>:
 800618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618e:	bf00      	nop
 8006190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006192:	bc08      	pop	{r3}
 8006194:	469e      	mov	lr, r3
 8006196:	4770      	bx	lr
